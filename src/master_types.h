/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef master_TYPES_H
#define master_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "data_types.h"
#include "security_types.h"
#include "client_types.h"
#include "cloudtrace_types.h"


namespace accumulo { namespace master {

struct MasterState {
  enum type {
    INITIAL = 0,
    HAVE_LOCK = 1,
    SAFE_MODE = 2,
    NORMAL = 3,
    UNLOAD_METADATA_TABLETS = 4,
    UNLOAD_ROOT_TABLET = 5,
    STOP = 6
  };
};

extern const std::map<int, const char*> _MasterState_VALUES_TO_NAMES;

struct MasterGoalState {
  enum type {
    CLEAN_STOP = 0,
    SAFE_MODE = 1,
    NORMAL = 2
  };
};

extern const std::map<int, const char*> _MasterGoalState_VALUES_TO_NAMES;

struct TabletLoadState {
  enum type {
    LOADED = 0,
    LOAD_FAILURE = 1,
    UNLOADED = 2,
    UNLOAD_FAILURE_NOT_SERVING = 3,
    UNLOAD_ERROR = 4,
    CHOPPED = 5
  };
};

extern const std::map<int, const char*> _TabletLoadState_VALUES_TO_NAMES;

struct TableOperation {
  enum type {
    CREATE = 0,
    CLONE = 1,
    DELETE = 2,
    RENAME = 3,
    ONLINE = 4,
    OFFLINE = 5,
    MERGE = 6,
    DELETE_RANGE = 7,
    BULK_IMPORT = 8,
    COMPACT = 9
  };
};

extern const std::map<int, const char*> _TableOperation_VALUES_TO_NAMES;

typedef struct _Compacting__isset {
  _Compacting__isset() : running(false), queued(false) {}
  bool running;
  bool queued;
} _Compacting__isset;

class Compacting {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Compacting() : running(0), queued(0) {
  }

  virtual ~Compacting() throw() {}

  int32_t running;
  int32_t queued;

  _Compacting__isset __isset;

  bool operator == (const Compacting & rhs) const
  {
    if (!(running == rhs.running))
      return false;
    if (!(queued == rhs.queued))
      return false;
    return true;
  }
  bool operator != (const Compacting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Compacting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableInfo__isset {
  _TableInfo__isset() : recs(false), recsInMemory(false), tablets(false), onlineTablets(false), ingestRate(false), ingestByteRate(false), queryRate(false), queryByteRate(false), cminor(false), cmajor(false), scans(false) {}
  bool recs;
  bool recsInMemory;
  bool tablets;
  bool onlineTablets;
  bool ingestRate;
  bool ingestByteRate;
  bool queryRate;
  bool queryByteRate;
  bool cminor;
  bool cmajor;
  bool scans;
} _TableInfo__isset;

class TableInfo {
 public:

  static const char* ascii_fingerprint; // = "4B3A524368C4ED01FE2A63BDC5D3303F";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x3A,0x52,0x43,0x68,0xC4,0xED,0x01,0xFE,0x2A,0x63,0xBD,0xC5,0xD3,0x30,0x3F};

  TableInfo() : recs(0), recsInMemory(0), tablets(0), onlineTablets(0), ingestRate(0), ingestByteRate(0), queryRate(0), queryByteRate(0) {
  }

  virtual ~TableInfo() throw() {}

  int64_t recs;
  int64_t recsInMemory;
  int32_t tablets;
  int32_t onlineTablets;
  double ingestRate;
  double ingestByteRate;
  double queryRate;
  double queryByteRate;
  Compacting cminor;
  Compacting cmajor;
  Compacting scans;

  _TableInfo__isset __isset;

  bool operator == (const TableInfo & rhs) const
  {
    if (!(recs == rhs.recs))
      return false;
    if (!(recsInMemory == rhs.recsInMemory))
      return false;
    if (!(tablets == rhs.tablets))
      return false;
    if (!(onlineTablets == rhs.onlineTablets))
      return false;
    if (!(ingestRate == rhs.ingestRate))
      return false;
    if (!(ingestByteRate == rhs.ingestByteRate))
      return false;
    if (!(queryRate == rhs.queryRate))
      return false;
    if (!(queryByteRate == rhs.queryByteRate))
      return false;
    if (!(cminor == rhs.cminor))
      return false;
    if (!(cmajor == rhs.cmajor))
      return false;
    if (!(scans == rhs.scans))
      return false;
    return true;
  }
  bool operator != (const TableInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecoveryStatus__isset {
  _RecoveryStatus__isset() : host(false), name(false), mapProgress(false), reduceProgress(false), runtime(false), copyProgress(false) {}
  bool host;
  bool name;
  bool mapProgress;
  bool reduceProgress;
  bool runtime;
  bool copyProgress;
} _RecoveryStatus__isset;

class RecoveryStatus {
 public:

  static const char* ascii_fingerprint; // = "C079FBBCC92CA77299012F16E5375E37";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x79,0xFB,0xBC,0xC9,0x2C,0xA7,0x72,0x99,0x01,0x2F,0x16,0xE5,0x37,0x5E,0x37};

  RecoveryStatus() : host(""), name(""), mapProgress(0), reduceProgress(0), runtime(0), copyProgress(0) {
  }

  virtual ~RecoveryStatus() throw() {}

  std::string host;
  std::string name;
  double mapProgress;
  double reduceProgress;
  int32_t runtime;
  double copyProgress;

  _RecoveryStatus__isset __isset;

  bool operator == (const RecoveryStatus & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(mapProgress == rhs.mapProgress))
      return false;
    if (!(reduceProgress == rhs.reduceProgress))
      return false;
    if (!(runtime == rhs.runtime))
      return false;
    if (!(copyProgress == rhs.copyProgress))
      return false;
    return true;
  }
  bool operator != (const RecoveryStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecoveryStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoggerStatus__isset {
  _LoggerStatus__isset() : logger(false) {}
  bool logger;
} _LoggerStatus__isset;

class LoggerStatus {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  LoggerStatus() : logger("") {
  }

  virtual ~LoggerStatus() throw() {}

  std::string logger;

  _LoggerStatus__isset __isset;

  bool operator == (const LoggerStatus & rhs) const
  {
    if (!(logger == rhs.logger))
      return false;
    return true;
  }
  bool operator != (const LoggerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoggerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletServerStatus__isset {
  _TabletServerStatus__isset() : tableMap(false), lastContact(false), name(false), osLoad(false), holdTime(false), lookups(false), loggers(false), indexCacheHits(false), indexCacheRequest(false), dataCacheHits(false), dataCacheRequest(false) {}
  bool tableMap;
  bool lastContact;
  bool name;
  bool osLoad;
  bool holdTime;
  bool lookups;
  bool loggers;
  bool indexCacheHits;
  bool indexCacheRequest;
  bool dataCacheHits;
  bool dataCacheRequest;
} _TabletServerStatus__isset;

class TabletServerStatus {
 public:

  static const char* ascii_fingerprint; // = "E24E36FA7C693A90B1E30F33F367C117";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x4E,0x36,0xFA,0x7C,0x69,0x3A,0x90,0xB1,0xE3,0x0F,0x33,0xF3,0x67,0xC1,0x17};

  TabletServerStatus() : lastContact(0), name(""), osLoad(0), holdTime(0), lookups(0), indexCacheHits(0), indexCacheRequest(0), dataCacheHits(0), dataCacheRequest(0) {
  }

  virtual ~TabletServerStatus() throw() {}

  std::map<std::string, TableInfo>  tableMap;
  int64_t lastContact;
  std::string name;
  double osLoad;
  int64_t holdTime;
  int64_t lookups;
  std::set<std::string>  loggers;
  int64_t indexCacheHits;
  int64_t indexCacheRequest;
  int64_t dataCacheHits;
  int64_t dataCacheRequest;

  _TabletServerStatus__isset __isset;

  bool operator == (const TabletServerStatus & rhs) const
  {
    if (!(tableMap == rhs.tableMap))
      return false;
    if (!(lastContact == rhs.lastContact))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(osLoad == rhs.osLoad))
      return false;
    if (!(holdTime == rhs.holdTime))
      return false;
    if (!(lookups == rhs.lookups))
      return false;
    if (!(loggers == rhs.loggers))
      return false;
    if (!(indexCacheHits == rhs.indexCacheHits))
      return false;
    if (!(indexCacheRequest == rhs.indexCacheRequest))
      return false;
    if (!(dataCacheHits == rhs.dataCacheHits))
      return false;
    if (!(dataCacheRequest == rhs.dataCacheRequest))
      return false;
    return true;
  }
  bool operator != (const TabletServerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletServerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeadServer__isset {
  _DeadServer__isset() : server(false), lastStatus(false), status(false) {}
  bool server;
  bool lastStatus;
  bool status;
} _DeadServer__isset;

class DeadServer {
 public:

  static const char* ascii_fingerprint; // = "FA35BEC6F4D26D79A7E0AD1366489BCC";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

  DeadServer() : server(""), lastStatus(0), status("") {
  }

  virtual ~DeadServer() throw() {}

  std::string server;
  int64_t lastStatus;
  std::string status;

  _DeadServer__isset __isset;

  bool operator == (const DeadServer & rhs) const
  {
    if (!(server == rhs.server))
      return false;
    if (!(lastStatus == rhs.lastStatus))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const DeadServer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeadServer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterMonitorInfo__isset {
  _MasterMonitorInfo__isset() : tableMap(false), tServerInfo(false), badTServers(false), recovery(false), loggers(false), state(false), goalState(false), unassignedTablets(false), serversShuttingDown(false), deadTabletServers(false), deadLoggers(false) {}
  bool tableMap;
  bool tServerInfo;
  bool badTServers;
  bool recovery;
  bool loggers;
  bool state;
  bool goalState;
  bool unassignedTablets;
  bool serversShuttingDown;
  bool deadTabletServers;
  bool deadLoggers;
} _MasterMonitorInfo__isset;

class MasterMonitorInfo {
 public:

  static const char* ascii_fingerprint; // = "EDB4BC8931448BEE8465A9E2F522A04A";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xB4,0xBC,0x89,0x31,0x44,0x8B,0xEE,0x84,0x65,0xA9,0xE2,0xF5,0x22,0xA0,0x4A};

  MasterMonitorInfo() : unassignedTablets(0) {
  }

  virtual ~MasterMonitorInfo() throw() {}

  std::map<std::string, TableInfo>  tableMap;
  std::vector<TabletServerStatus>  tServerInfo;
  std::map<std::string, int8_t>  badTServers;
  std::vector<RecoveryStatus>  recovery;
  std::vector<LoggerStatus>  loggers;
  MasterState::type state;
  MasterGoalState::type goalState;
  int32_t unassignedTablets;
  std::set<std::string>  serversShuttingDown;
  std::vector<DeadServer>  deadTabletServers;
  std::vector<DeadServer>  deadLoggers;

  _MasterMonitorInfo__isset __isset;

  bool operator == (const MasterMonitorInfo & rhs) const
  {
    if (!(tableMap == rhs.tableMap))
      return false;
    if (!(tServerInfo == rhs.tServerInfo))
      return false;
    if (!(badTServers == rhs.badTServers))
      return false;
    if (!(recovery == rhs.recovery))
      return false;
    if (!(loggers == rhs.loggers))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(goalState == rhs.goalState))
      return false;
    if (!(unassignedTablets == rhs.unassignedTablets))
      return false;
    if (!(serversShuttingDown == rhs.serversShuttingDown))
      return false;
    if (!(deadTabletServers == rhs.deadTabletServers))
      return false;
    if (!(deadLoggers == rhs.deadLoggers))
      return false;
    return true;
  }
  bool operator != (const MasterMonitorInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterMonitorInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TabletSplit__isset {
  _TabletSplit__isset() : oldTablet(false), newTablets(false) {}
  bool oldTablet;
  bool newTablets;
} _TabletSplit__isset;

class TabletSplit {
 public:

  static const char* ascii_fingerprint; // = "512446FDB691C6A2252369D371A5BDE9";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0x24,0x46,0xFD,0xB6,0x91,0xC6,0xA2,0x25,0x23,0x69,0xD3,0x71,0xA5,0xBD,0xE9};

  TabletSplit() {
  }

  virtual ~TabletSplit() throw() {}

  accumulo::data::TKeyExtent oldTablet;
  std::vector<accumulo::data::TKeyExtent>  newTablets;

  _TabletSplit__isset __isset;

  bool operator == (const TabletSplit & rhs) const
  {
    if (!(oldTablet == rhs.oldTablet))
      return false;
    if (!(newTablets == rhs.newTablets))
      return false;
    return true;
  }
  bool operator != (const TabletSplit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TabletSplit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecoveryException__isset {
  _RecoveryException__isset() : why(false) {}
  bool why;
} _RecoveryException__isset;

class RecoveryException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RecoveryException() : why("") {
  }

  virtual ~RecoveryException() throw() {}

  std::string why;

  _RecoveryException__isset __isset;

  bool operator == (const RecoveryException & rhs) const
  {
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const RecoveryException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecoveryException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
