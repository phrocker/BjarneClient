/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef security_TYPES_H
#define security_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace accumulo { namespace security {

struct SecurityErrorCode {
  enum type {
    DEFAULT_SECURITY_ERROR = 0,
    BAD_CREDENTIALS = 1,
    PERMISSION_DENIED = 2,
    USER_DOESNT_EXIST = 3,
    CONNECTION_ERROR = 4,
    USER_EXISTS = 5,
    GRANT_INVALID = 6,
    BAD_AUTHORIZATIONS = 7,
    INVALID_INSTANCEID = 8,
    TABLE_DOESNT_EXIST = 9
  };
};

extern const std::map<int, const char*> _SecurityErrorCode_VALUES_TO_NAMES;

typedef struct _AuthInfo__isset {
  _AuthInfo__isset() : user(false), password(false), instanceId(false) {}
  bool user;
  bool password;
  bool instanceId;
} _AuthInfo__isset;

class AuthInfo {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  AuthInfo() : user(""), password(""), instanceId("") {
  }

  virtual ~AuthInfo() throw() {}

  std::string user;
  std::string password;
  std::string instanceId;

  _AuthInfo__isset __isset;

  bool operator == (const AuthInfo & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const AuthInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSecurityException__isset {
  _ThriftSecurityException__isset() : user(false), code(false) {}
  bool user;
  bool code;
} _ThriftSecurityException__isset;

class ThriftSecurityException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  ThriftSecurityException() : user("") {
  }

  virtual ~ThriftSecurityException() throw() {}

  std::string user;
  SecurityErrorCode::type code;

  _ThriftSecurityException__isset __isset;

  bool operator == (const ThriftSecurityException & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const ThriftSecurityException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSecurityException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
