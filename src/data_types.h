/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef data_TYPES_H
#define data_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace accumulo { namespace data {

typedef int64_t ScanID;

typedef int64_t UpdateID;

typedef std::map<class TKeyExtent, std::vector<class TRange> >  ScanBatch;

typedef std::map<class TKeyExtent, std::vector<class TMutation> >  UpdateBatch;

typedef std::map<class TKeyExtent, std::map<std::string, class MapFileInfo> >  TabletFiles;

typedef struct _TKey__isset {
  _TKey__isset() : row(false), colFamily(false), colQualifier(false), colVisibility(false), timestamp(false) {}
  bool row;
  bool colFamily;
  bool colQualifier;
  bool colVisibility;
  bool timestamp;
} _TKey__isset;

class TKey {
 public:

  static const char* ascii_fingerprint; // = "A25840E2198F27E10AEEE70C9265C644";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x58,0x40,0xE2,0x19,0x8F,0x27,0xE1,0x0A,0xEE,0xE7,0x0C,0x92,0x65,0xC6,0x44};

  TKey() : row(""), colFamily(""), colQualifier(""), colVisibility(""), timestamp(0) {
  }

  virtual ~TKey() throw() {}

  std::string row;
  std::string colFamily;
  std::string colQualifier;
  std::string colVisibility;
  int64_t timestamp;

  _TKey__isset __isset;

  bool operator == (const TKey & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(colFamily == rhs.colFamily))
      return false;
    if (!(colQualifier == rhs.colQualifier))
      return false;
    if (!(colVisibility == rhs.colVisibility))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TColumn__isset {
  _TColumn__isset() : columnFamily(false), columnQualifier(false), columnVisibility(false) {}
  bool columnFamily;
  bool columnQualifier;
  bool columnVisibility;
} _TColumn__isset;

class TColumn {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  TColumn() : columnFamily(""), columnQualifier(""), columnVisibility("") {
  }

  virtual ~TColumn() throw() {}

  std::string columnFamily;
  std::string columnQualifier;
  std::string columnVisibility;

  _TColumn__isset __isset;

  bool operator == (const TColumn & rhs) const
  {
    if (!(columnFamily == rhs.columnFamily))
      return false;
    if (!(columnQualifier == rhs.columnQualifier))
      return false;
    if (!(columnVisibility == rhs.columnVisibility))
      return false;
    return true;
  }
  bool operator != (const TColumn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TMutation__isset {
  _TMutation__isset() : row(false), data(false), values(false), entries(false) {}
  bool row;
  bool data;
  bool values;
  bool entries;
} _TMutation__isset;

class TMutation {
 public:

  static const char* ascii_fingerprint; // = "FD79BD16256E16CC9822166FFB701F19";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x79,0xBD,0x16,0x25,0x6E,0x16,0xCC,0x98,0x22,0x16,0x6F,0xFB,0x70,0x1F,0x19};

  TMutation() : row(""), data(""), entries(0) {
  }

  virtual ~TMutation() throw() {}

  std::string row;
  std::string data;
  std::vector<std::string>  values;
  int32_t entries;

  _TMutation__isset __isset;

  bool operator == (const TMutation & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(entries == rhs.entries))
      return false;
    return true;
  }
  bool operator != (const TMutation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMutation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TKeyExtent__isset {
  _TKeyExtent__isset() : table(false), endRow(false), prevEndRow(false) {}
  bool table;
  bool endRow;
  bool prevEndRow;
} _TKeyExtent__isset;

class TKeyExtent {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  TKeyExtent() : table(""), endRow(""), prevEndRow("") {
  }

  virtual ~TKeyExtent() throw() {}

  std::string table;
  std::string endRow;
  std::string prevEndRow;

  _TKeyExtent__isset __isset;

  bool operator == (const TKeyExtent & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(endRow == rhs.endRow))
      return false;
    if (!(prevEndRow == rhs.prevEndRow))
      return false;
    return true;
  }
  bool operator != (const TKeyExtent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKeyExtent &rhs ) const
  {
	  if (!(table < rhs.table))
	       return false;
	     if (!(endRow < rhs.endRow))
	       return false;
	     if (!(prevEndRow < rhs.prevEndRow))
	       return false;
	     return true;
  }

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TKeyValue__isset {
  _TKeyValue__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _TKeyValue__isset;

class TKeyValue {
 public:

  static const char* ascii_fingerprint; // = "8DCBA6F4B336C8854964F08FBF391943";
  static const uint8_t binary_fingerprint[16]; // = {0x8D,0xCB,0xA6,0xF4,0xB3,0x36,0xC8,0x85,0x49,0x64,0xF0,0x8F,0xBF,0x39,0x19,0x43};

  TKeyValue() : value("") {
  }

  virtual ~TKeyValue() throw() {}

  TKey key;
  std::string value;

  _TKeyValue__isset __isset;

  bool operator == (const TKeyValue & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TKeyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TKeyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ScanResult__isset {
  _ScanResult__isset() : results(false), more(false) {}
  bool results;
  bool more;
} _ScanResult__isset;

class ScanResult {
 public:

  static const char* ascii_fingerprint; // = "6F1B73B7E271D491518DF10CFB0E8087";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x1B,0x73,0xB7,0xE2,0x71,0xD4,0x91,0x51,0x8D,0xF1,0x0C,0xFB,0x0E,0x80,0x87};

  ScanResult() : more(0) {
  }

  virtual ~ScanResult() throw() {}

  std::vector<TKeyValue>  results;
  bool more;

  _ScanResult__isset __isset;

  bool operator == (const ScanResult & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    if (!(more == rhs.more))
      return false;
    return true;
  }
  bool operator != (const ScanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRange__isset {
  _TRange__isset() : start(false), stop(false), startKeyInclusive(false), stopKeyInclusive(false), infiniteStartKey(false), infiniteStopKey(false) {}
  bool start;
  bool stop;
  bool startKeyInclusive;
  bool stopKeyInclusive;
  bool infiniteStartKey;
  bool infiniteStopKey;
} _TRange__isset;

class TRange {
 public:

  static const char* ascii_fingerprint; // = "51C5BDA7AC16F12A08D7C8B6BB52C360";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xC5,0xBD,0xA7,0xAC,0x16,0xF1,0x2A,0x08,0xD7,0xC8,0xB6,0xBB,0x52,0xC3,0x60};

  TRange() : startKeyInclusive(0), stopKeyInclusive(0), infiniteStartKey(0), infiniteStopKey(0) {
  }

  virtual ~TRange() throw() {}

  TKey start;
  TKey stop;
  bool startKeyInclusive;
  bool stopKeyInclusive;
  bool infiniteStartKey;
  bool infiniteStopKey;

  _TRange__isset __isset;

  bool operator == (const TRange & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    if (!(startKeyInclusive == rhs.startKeyInclusive))
      return false;
    if (!(stopKeyInclusive == rhs.stopKeyInclusive))
      return false;
    if (!(infiniteStartKey == rhs.infiniteStartKey))
      return false;
    if (!(infiniteStopKey == rhs.infiniteStopKey))
      return false;
    return true;
  }
  bool operator != (const TRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MultiScanResult__isset {
  _MultiScanResult__isset() : results(false), failures(false), fullScans(false), partScan(false), partNextKey(false), partNextKeyInclusive(false), more(false) {}
  bool results;
  bool failures;
  bool fullScans;
  bool partScan;
  bool partNextKey;
  bool partNextKeyInclusive;
  bool more;
} _MultiScanResult__isset;

class MultiScanResult {
 public:

  static const char* ascii_fingerprint; // = "1710A2EAC368D6E92A3F98939AD49DAF";
  static const uint8_t binary_fingerprint[16]; // = {0x17,0x10,0xA2,0xEA,0xC3,0x68,0xD6,0xE9,0x2A,0x3F,0x98,0x93,0x9A,0xD4,0x9D,0xAF};

  MultiScanResult() : partNextKeyInclusive(0), more(0) {
  }

  virtual ~MultiScanResult() throw() {}

  std::vector<TKeyValue>  results;
  ScanBatch failures;
  std::vector<TKeyExtent>  fullScans;
  TKeyExtent partScan;
  TKey partNextKey;
  bool partNextKeyInclusive;
  bool more;

  _MultiScanResult__isset __isset;

  bool operator == (const MultiScanResult & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    if (!(failures == rhs.failures))
      return false;
    if (!(fullScans == rhs.fullScans))
      return false;
    if (!(partScan == rhs.partScan))
      return false;
    if (!(partNextKey == rhs.partNextKey))
      return false;
    if (!(partNextKeyInclusive == rhs.partNextKeyInclusive))
      return false;
    if (!(more == rhs.more))
      return false;
    return true;
  }
  bool operator != (const MultiScanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiScanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InitialScan__isset {
  _InitialScan__isset() : scanID(false), result(false) {}
  bool scanID;
  bool result;
} _InitialScan__isset;

class InitialScan {
 public:

  static const char* ascii_fingerprint; // = "18AE44780236DD1CAB1037C71440C057";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xAE,0x44,0x78,0x02,0x36,0xDD,0x1C,0xAB,0x10,0x37,0xC7,0x14,0x40,0xC0,0x57};

  InitialScan() : scanID(0) {
  }

  virtual ~InitialScan() throw() {}

  ScanID scanID;
  ScanResult result;

  _InitialScan__isset __isset;

  bool operator == (const InitialScan & rhs) const
  {
    if (!(scanID == rhs.scanID))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const InitialScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitialScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InitialMultiScan__isset {
  _InitialMultiScan__isset() : scanID(false), result(false) {}
  bool scanID;
  bool result;
} _InitialMultiScan__isset;

class InitialMultiScan {
 public:

  static const char* ascii_fingerprint; // = "3D143740F405DA8C33D95336FD4CFC33";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0x14,0x37,0x40,0xF4,0x05,0xDA,0x8C,0x33,0xD9,0x53,0x36,0xFD,0x4C,0xFC,0x33};

  InitialMultiScan() : scanID(0) {
  }

  virtual ~InitialMultiScan() throw() {}

  ScanID scanID;
  MultiScanResult result;

  _InitialMultiScan__isset __isset;

  bool operator == (const InitialMultiScan & rhs) const
  {
    if (!(scanID == rhs.scanID))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const InitialMultiScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitialMultiScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IterInfo__isset {
  _IterInfo__isset() : priority(false), className(false), iterName(false) {}
  bool priority;
  bool className;
  bool iterName;
} _IterInfo__isset;

class IterInfo {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  IterInfo() : priority(0), className(""), iterName("") {
  }

  virtual ~IterInfo() throw() {}

  int32_t priority;
  std::string className;
  std::string iterName;

  _IterInfo__isset __isset;

  bool operator == (const IterInfo & rhs) const
  {
    if (!(priority == rhs.priority))
      return false;
    if (!(className == rhs.className))
      return false;
    if (!(iterName == rhs.iterName))
      return false;
    return true;
  }
  bool operator != (const IterInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IterInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConstraintViolationSummary__isset {
  _TConstraintViolationSummary__isset() : constrainClass(false), violationCode(false), violationDescription(false), numberOfViolatingMutations(false) {}
  bool constrainClass;
  bool violationCode;
  bool violationDescription;
  bool numberOfViolatingMutations;
} _TConstraintViolationSummary__isset;

class TConstraintViolationSummary {
 public:

  static const char* ascii_fingerprint; // = "67DCD7E9C756B859BA6A7E138EFB1053";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0xDC,0xD7,0xE9,0xC7,0x56,0xB8,0x59,0xBA,0x6A,0x7E,0x13,0x8E,0xFB,0x10,0x53};

  TConstraintViolationSummary() : constrainClass(""), violationCode(0), violationDescription(""), numberOfViolatingMutations(0) {
  }

  virtual ~TConstraintViolationSummary() throw() {}

  std::string constrainClass;
  int16_t violationCode;
  std::string violationDescription;
  int64_t numberOfViolatingMutations;

  _TConstraintViolationSummary__isset __isset;

  bool operator == (const TConstraintViolationSummary & rhs) const
  {
    if (!(constrainClass == rhs.constrainClass))
      return false;
    if (!(violationCode == rhs.violationCode))
      return false;
    if (!(violationDescription == rhs.violationDescription))
      return false;
    if (!(numberOfViolatingMutations == rhs.numberOfViolatingMutations))
      return false;
    return true;
  }
  bool operator != (const TConstraintViolationSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConstraintViolationSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UpdateErrors__isset {
  _UpdateErrors__isset() : failedExtents(false), violationSummaries(false), authorizationFailures(false) {}
  bool failedExtents;
  bool violationSummaries;
  bool authorizationFailures;
} _UpdateErrors__isset;

class UpdateErrors {
 public:

  static const char* ascii_fingerprint; // = "68D7165DFAD73163F08CEB200BE01612";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0xD7,0x16,0x5D,0xFA,0xD7,0x31,0x63,0xF0,0x8C,0xEB,0x20,0x0B,0xE0,0x16,0x12};

  UpdateErrors() {
  }

  virtual ~UpdateErrors() throw() {}

  std::map<TKeyExtent, int64_t>  failedExtents;
  std::vector<TConstraintViolationSummary>  violationSummaries;
  std::vector<TKeyExtent>  authorizationFailures;

  _UpdateErrors__isset __isset;

  bool operator == (const UpdateErrors & rhs) const
  {
    if (!(failedExtents == rhs.failedExtents))
      return false;
    if (!(violationSummaries == rhs.violationSummaries))
      return false;
    if (!(authorizationFailures == rhs.authorizationFailures))
      return false;
    return true;
  }
  bool operator != (const UpdateErrors &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateErrors & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapFileInfo__isset {
  _MapFileInfo__isset() : estimatedSize(false) {}
  bool estimatedSize;
} _MapFileInfo__isset;

class MapFileInfo {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  MapFileInfo() : estimatedSize(0) {
  }

  virtual ~MapFileInfo() throw() {}

  int64_t estimatedSize;

  _MapFileInfo__isset __isset;

  bool operator == (const MapFileInfo & rhs) const
  {
    if (!(estimatedSize == rhs.estimatedSize))
      return false;
    return true;
  }
  bool operator != (const MapFileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapFileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
