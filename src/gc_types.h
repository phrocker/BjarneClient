/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef gc_TYPES_H
#define gc_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "security_types.h"
#include "cloudtrace_types.h"


namespace accumulo { namespace gc {

typedef struct _GcCycleStats__isset {
  _GcCycleStats__isset() : started(false), finished(false), candidates(false), inUse(false), deleted(false), errors(false) {}
  bool started;
  bool finished;
  bool candidates;
  bool inUse;
  bool deleted;
  bool errors;
} _GcCycleStats__isset;

class GcCycleStats {
 public:

  static const char* ascii_fingerprint; // = "FD11249ACE8A1CE79C544B3DBECE03F7";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x11,0x24,0x9A,0xCE,0x8A,0x1C,0xE7,0x9C,0x54,0x4B,0x3D,0xBE,0xCE,0x03,0xF7};

  GcCycleStats() : started(0), finished(0), candidates(0), inUse(0), deleted(0), errors(0) {
  }

  virtual ~GcCycleStats() throw() {}

  int64_t started;
  int64_t finished;
  int64_t candidates;
  int64_t inUse;
  int64_t deleted;
  int64_t errors;

  _GcCycleStats__isset __isset;

  bool operator == (const GcCycleStats & rhs) const
  {
    if (!(started == rhs.started))
      return false;
    if (!(finished == rhs.finished))
      return false;
    if (!(candidates == rhs.candidates))
      return false;
    if (!(inUse == rhs.inUse))
      return false;
    if (!(deleted == rhs.deleted))
      return false;
    if (!(errors == rhs.errors))
      return false;
    return true;
  }
  bool operator != (const GcCycleStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GcCycleStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GCStatus__isset {
  _GCStatus__isset() : last(false), lastLog(false), current(false), currentLog(false) {}
  bool last;
  bool lastLog;
  bool current;
  bool currentLog;
} _GCStatus__isset;

class GCStatus {
 public:

  static const char* ascii_fingerprint; // = "F24ADFF7BE7AC37225314C08B2624E5A";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x4A,0xDF,0xF7,0xBE,0x7A,0xC3,0x72,0x25,0x31,0x4C,0x08,0xB2,0x62,0x4E,0x5A};

  GCStatus() {
  }

  virtual ~GCStatus() throw() {}

  GcCycleStats last;
  GcCycleStats lastLog;
  GcCycleStats current;
  GcCycleStats currentLog;

  _GCStatus__isset __isset;

  bool operator == (const GCStatus & rhs) const
  {
    if (!(last == rhs.last))
      return false;
    if (!(lastLog == rhs.lastLog))
      return false;
    if (!(current == rhs.current))
      return false;
    if (!(currentLog == rhs.currentLog))
      return false;
    return true;
  }
  bool operator != (const GCStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GCStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
