/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "client_types.h"

namespace accumulo { namespace client {

int _kTableOperationValues[] = {
  TableOperation::CREATE,
  TableOperation::DELETE,
  TableOperation::RENAME,
  TableOperation::SET_PROPERTY,
  TableOperation::REMOVE_PROPERTY,
  TableOperation::OFFLINE,
  TableOperation::ONLINE,
  TableOperation::FLUSH,
  TableOperation::PERMISSION,
  TableOperation::CLONE,
  TableOperation::MERGE,
  TableOperation::DELETE_RANGE,
  TableOperation::BULK_IMPORT,
  TableOperation::COMPACT
};
const char* _kTableOperationNames[] = {
  "CREATE",
  "DELETE",
  "RENAME",
  "SET_PROPERTY",
  "REMOVE_PROPERTY",
  "OFFLINE",
  "ONLINE",
  "FLUSH",
  "PERMISSION",
  "CLONE",
  "MERGE",
  "DELETE_RANGE",
  "BULK_IMPORT",
  "COMPACT"
};
const std::map<int, const char*> _TableOperation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kTableOperationValues, _kTableOperationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTableOperationExceptionTypeValues[] = {
  TableOperationExceptionType::EXISTS,
  TableOperationExceptionType::NOTFOUND,
  TableOperationExceptionType::OFFLINE,
  TableOperationExceptionType::BULK_BAD_INPUT_DIRECTORY,
  TableOperationExceptionType::BULK_BAD_ERROR_DIRECTORY,
  TableOperationExceptionType::BAD_RANGE,
  TableOperationExceptionType::OTHER
};
const char* _kTableOperationExceptionTypeNames[] = {
  "EXISTS",
  "NOTFOUND",
  "OFFLINE",
  "BULK_BAD_INPUT_DIRECTORY",
  "BULK_BAD_ERROR_DIRECTORY",
  "BAD_RANGE",
  "OTHER"
};
const std::map<int, const char*> _TableOperationExceptionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTableOperationExceptionTypeValues, _kTableOperationExceptionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConfigurationTypeValues[] = {
  ConfigurationType::CURRENT,
  ConfigurationType::SITE,
  ConfigurationType::DEFAULT
};
const char* _kConfigurationTypeNames[] = {
  "CURRENT",
  "SITE",
  "DEFAULT"
};
const std::map<int, const char*> _ConfigurationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kConfigurationTypeValues, _kConfigurationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ThriftTableOperationException::ascii_fingerprint = "25ADB6C99E620F729A978F0716AE3156";
const uint8_t ThriftTableOperationException::binary_fingerprint[16] = {0x25,0xAD,0xB6,0xC9,0x9E,0x62,0x0F,0x72,0x9A,0x97,0x8F,0x07,0x16,0xAE,0x31,0x56};

uint32_t ThriftTableOperationException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableId);
          this->__isset.tableId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->op = (TableOperation::type)ecast0;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type = (TableOperationExceptionType::type)ecast1;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftTableOperationException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ThriftTableOperationException");
  xfer += oprot->writeFieldBegin("tableId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tableId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
