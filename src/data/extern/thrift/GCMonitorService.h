/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef GCMonitorService_H
#define GCMonitorService_H

#include <TProcessor.h>
#include "gc_types.h"

namespace accumulo { namespace gc {

class GCMonitorServiceIf {
 public:
  virtual ~GCMonitorServiceIf() {}
  virtual void getStatus(GCStatus& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) = 0;
};

class GCMonitorServiceNull : virtual public GCMonitorServiceIf {
 public:
  virtual ~GCMonitorServiceNull() {}
  void getStatus(GCStatus& /* _return */, const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */) {
    return;
  }
};

typedef struct _GCMonitorService_getStatus_args__isset {
  _GCMonitorService_getStatus_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo;
  bool credentials;
} _GCMonitorService_getStatus_args__isset;

class GCMonitorService_getStatus_args {
 public:

  GCMonitorService_getStatus_args() {
  }

  virtual ~GCMonitorService_getStatus_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;

  _GCMonitorService_getStatus_args__isset __isset;

  bool operator == (const GCMonitorService_getStatus_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const GCMonitorService_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GCMonitorService_getStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GCMonitorService_getStatus_pargs {
 public:


  virtual ~GCMonitorService_getStatus_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GCMonitorService_getStatus_result__isset {
  _GCMonitorService_getStatus_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _GCMonitorService_getStatus_result__isset;

class GCMonitorService_getStatus_result {
 public:

  GCMonitorService_getStatus_result() {
  }

  virtual ~GCMonitorService_getStatus_result() throw() {}

  GCStatus success;
  accumulo::security::ThriftSecurityException sec;

  _GCMonitorService_getStatus_result__isset __isset;

  bool operator == (const GCMonitorService_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const GCMonitorService_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GCMonitorService_getStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GCMonitorService_getStatus_presult__isset {
  _GCMonitorService_getStatus_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _GCMonitorService_getStatus_presult__isset;

class GCMonitorService_getStatus_presult {
 public:


  virtual ~GCMonitorService_getStatus_presult() throw() {}

  GCStatus* success;
  accumulo::security::ThriftSecurityException sec;

  _GCMonitorService_getStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GCMonitorServiceClient : virtual public GCMonitorServiceIf {
 public:
  GCMonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GCMonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStatus(GCStatus& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void send_getStatus(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void recv_getStatus(GCStatus& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GCMonitorServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<GCMonitorServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (GCMonitorServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GCMonitorServiceProcessor(boost::shared_ptr<GCMonitorServiceIf> iface) :
    iface_(iface) {
    processMap_["getStatus"] = &GCMonitorServiceProcessor::process_getStatus;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~GCMonitorServiceProcessor() {}
};

class GCMonitorServiceMultiface : virtual public GCMonitorServiceIf {
 public:
  GCMonitorServiceMultiface(std::vector<boost::shared_ptr<GCMonitorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GCMonitorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GCMonitorServiceIf> > ifaces_;
  GCMonitorServiceMultiface() {}
  void add(boost::shared_ptr<GCMonitorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStatus(GCStatus& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getStatus(_return, tinfo, credentials);
        return;
      } else {
        ifaces_[i]->getStatus(_return, tinfo, credentials);
      }
    }
  }

};

}} // namespace

#endif
