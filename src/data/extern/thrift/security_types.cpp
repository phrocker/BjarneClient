/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "security_types.h"

namespace accumulo { namespace security {

int _kSecurityErrorCodeValues[] = {
  SecurityErrorCode::DEFAULT_SECURITY_ERROR,
  SecurityErrorCode::BAD_CREDENTIALS,
  SecurityErrorCode::PERMISSION_DENIED,
  SecurityErrorCode::USER_DOESNT_EXIST,
  SecurityErrorCode::CONNECTION_ERROR,
  SecurityErrorCode::USER_EXISTS,
  SecurityErrorCode::GRANT_INVALID,
  SecurityErrorCode::BAD_AUTHORIZATIONS,
  SecurityErrorCode::INVALID_INSTANCEID,
  SecurityErrorCode::TABLE_DOESNT_EXIST
};
const char* _kSecurityErrorCodeNames[] = {
  "DEFAULT_SECURITY_ERROR",
  "BAD_CREDENTIALS",
  "PERMISSION_DENIED",
  "USER_DOESNT_EXIST",
  "CONNECTION_ERROR",
  "USER_EXISTS",
  "GRANT_INVALID",
  "BAD_AUTHORIZATIONS",
  "INVALID_INSTANCEID",
  "TABLE_DOESNT_EXIST"
};
const std::map<int, const char*> _SecurityErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kSecurityErrorCodeValues, _kSecurityErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* AuthInfo::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t AuthInfo::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t AuthInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->instanceId);
          this->__isset.instanceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthInfo");
  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->password);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("instanceId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->instanceId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ThriftSecurityException::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t ThriftSecurityException::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t ThriftSecurityException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->code = (SecurityErrorCode::type)ecast0;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftSecurityException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ThriftSecurityException");
  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
