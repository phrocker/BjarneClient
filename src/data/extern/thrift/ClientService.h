/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ClientService_H
#define ClientService_H

#include <TProcessor.h>
#include "client_types.h"

namespace accumulo { namespace client {

class ClientServiceIf {
 public:
  virtual ~ClientServiceIf() {}
  virtual void getRootTabletLocation(std::string& _return) = 0;
  virtual void getInstanceId(std::string& _return) = 0;
  virtual void getZooKeepers(std::string& _return) = 0;
  virtual void bulkImportFiles(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t tid, const std::string& tableId, const std::vector<std::string> & files, const std::string& errorDir, const bool setTime) = 0;
  virtual bool isActive(const accumulo::cloudtrace::TInfo& tinfo, const int64_t tid) = 0;
  virtual void ping(const accumulo::security::AuthInfo& credentials) = 0;
  virtual bool authenticateUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password) = 0;
  virtual void listUsers(std::set<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) = 0;
  virtual void createUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password, const std::vector<std::string> & authorizations) = 0;
  virtual void dropUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user) = 0;
  virtual void changePassword(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password) = 0;
  virtual void changeAuthorizations(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::vector<std::string> & authorizations) = 0;
  virtual void getUserAuthorizations(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user) = 0;
  virtual bool hasSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t sysPerm) = 0;
  virtual bool hasTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t tblPerm) = 0;
  virtual void grantSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission) = 0;
  virtual void revokeSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission) = 0;
  virtual void grantTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission) = 0;
  virtual void revokeTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission) = 0;
  virtual void getConfiguration(std::map<std::string, std::string> & _return, const ConfigurationType::type type) = 0;
  virtual void getTableConfiguration(std::map<std::string, std::string> & _return, const std::string& tableName) = 0;
  virtual bool checkClass(const accumulo::cloudtrace::TInfo& tinfo, const std::string& className, const std::string& interfaceMatch) = 0;
};

class ClientServiceNull : virtual public ClientServiceIf {
 public:
  virtual ~ClientServiceNull() {}
  void getRootTabletLocation(std::string& /* _return */) {
    return;
  }
  void getInstanceId(std::string& /* _return */) {
    return;
  }
  void getZooKeepers(std::string& /* _return */) {
    return;
  }
  void bulkImportFiles(std::vector<std::string> & /* _return */, const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const int64_t /* tid */, const std::string& /* tableId */, const std::vector<std::string> & /* files */, const std::string& /* errorDir */, const bool /* setTime */) {
    return;
  }
  bool isActive(const accumulo::cloudtrace::TInfo& /* tinfo */, const int64_t /* tid */) {
    bool _return = false;
    return _return;
  }
  void ping(const accumulo::security::AuthInfo& /* credentials */) {
    return;
  }
  bool authenticateUser(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  void listUsers(std::set<std::string> & /* _return */, const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */) {
    return;
  }
  void createUser(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::string& /* password */, const std::vector<std::string> & /* authorizations */) {
    return;
  }
  void dropUser(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */) {
    return;
  }
  void changePassword(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::string& /* password */) {
    return;
  }
  void changeAuthorizations(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::vector<std::string> & /* authorizations */) {
    return;
  }
  void getUserAuthorizations(std::vector<std::string> & /* _return */, const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */) {
    return;
  }
  bool hasSystemPermission(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const int8_t /* sysPerm */) {
    bool _return = false;
    return _return;
  }
  bool hasTablePermission(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::string& /* tableName */, const int8_t /* tblPerm */) {
    bool _return = false;
    return _return;
  }
  void grantSystemPermission(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const int8_t /* permission */) {
    return;
  }
  void revokeSystemPermission(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const int8_t /* permission */) {
    return;
  }
  void grantTablePermission(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::string& /* tableName */, const int8_t /* permission */) {
    return;
  }
  void revokeTablePermission(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* user */, const std::string& /* tableName */, const int8_t /* permission */) {
    return;
  }
  void getConfiguration(std::map<std::string, std::string> & /* _return */, const ConfigurationType::type /* type */) {
    return;
  }
  void getTableConfiguration(std::map<std::string, std::string> & /* _return */, const std::string& /* tableName */) {
    return;
  }
  bool checkClass(const accumulo::cloudtrace::TInfo& /* tinfo */, const std::string& /* className */, const std::string& /* interfaceMatch */) {
    bool _return = false;
    return _return;
  }
};


class ClientService_getRootTabletLocation_args {
 public:

  ClientService_getRootTabletLocation_args() {
  }

  virtual ~ClientService_getRootTabletLocation_args() throw() {}


  bool operator == (const ClientService_getRootTabletLocation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_getRootTabletLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getRootTabletLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getRootTabletLocation_pargs {
 public:


  virtual ~ClientService_getRootTabletLocation_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getRootTabletLocation_result__isset {
  _ClientService_getRootTabletLocation_result__isset() : success(false) {}
  bool success;
} _ClientService_getRootTabletLocation_result__isset;

class ClientService_getRootTabletLocation_result {
 public:

  ClientService_getRootTabletLocation_result() : success("") {
  }

  virtual ~ClientService_getRootTabletLocation_result() throw() {}

  std::string success;

  _ClientService_getRootTabletLocation_result__isset __isset;

  bool operator == (const ClientService_getRootTabletLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_getRootTabletLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getRootTabletLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getRootTabletLocation_presult__isset {
  _ClientService_getRootTabletLocation_presult__isset() : success(false) {}
  bool success;
} _ClientService_getRootTabletLocation_presult__isset;

class ClientService_getRootTabletLocation_presult {
 public:


  virtual ~ClientService_getRootTabletLocation_presult() throw() {}

  std::string* success;

  _ClientService_getRootTabletLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ClientService_getInstanceId_args {
 public:

  ClientService_getInstanceId_args() {
  }

  virtual ~ClientService_getInstanceId_args() throw() {}


  bool operator == (const ClientService_getInstanceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_getInstanceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getInstanceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getInstanceId_pargs {
 public:


  virtual ~ClientService_getInstanceId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getInstanceId_result__isset {
  _ClientService_getInstanceId_result__isset() : success(false) {}
  bool success;
} _ClientService_getInstanceId_result__isset;

class ClientService_getInstanceId_result {
 public:

  ClientService_getInstanceId_result() : success("") {
  }

  virtual ~ClientService_getInstanceId_result() throw() {}

  std::string success;

  _ClientService_getInstanceId_result__isset __isset;

  bool operator == (const ClientService_getInstanceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_getInstanceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getInstanceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getInstanceId_presult__isset {
  _ClientService_getInstanceId_presult__isset() : success(false) {}
  bool success;
} _ClientService_getInstanceId_presult__isset;

class ClientService_getInstanceId_presult {
 public:


  virtual ~ClientService_getInstanceId_presult() throw() {}

  std::string* success;

  _ClientService_getInstanceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ClientService_getZooKeepers_args {
 public:

  ClientService_getZooKeepers_args() {
  }

  virtual ~ClientService_getZooKeepers_args() throw() {}


  bool operator == (const ClientService_getZooKeepers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientService_getZooKeepers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getZooKeepers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getZooKeepers_pargs {
 public:


  virtual ~ClientService_getZooKeepers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getZooKeepers_result__isset {
  _ClientService_getZooKeepers_result__isset() : success(false) {}
  bool success;
} _ClientService_getZooKeepers_result__isset;

class ClientService_getZooKeepers_result {
 public:

  ClientService_getZooKeepers_result() : success("") {
  }

  virtual ~ClientService_getZooKeepers_result() throw() {}

  std::string success;

  _ClientService_getZooKeepers_result__isset __isset;

  bool operator == (const ClientService_getZooKeepers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_getZooKeepers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getZooKeepers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getZooKeepers_presult__isset {
  _ClientService_getZooKeepers_presult__isset() : success(false) {}
  bool success;
} _ClientService_getZooKeepers_presult__isset;

class ClientService_getZooKeepers_presult {
 public:


  virtual ~ClientService_getZooKeepers_presult() throw() {}

  std::string* success;

  _ClientService_getZooKeepers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_bulkImportFiles_args__isset {
  _ClientService_bulkImportFiles_args__isset() : tinfo(false), credentials(false), tid(false), tableId(false), files(false), errorDir(false), setTime(false) {}
  bool tinfo;
  bool credentials;
  bool tid;
  bool tableId;
  bool files;
  bool errorDir;
  bool setTime;
} _ClientService_bulkImportFiles_args__isset;

class ClientService_bulkImportFiles_args {
 public:

  ClientService_bulkImportFiles_args() : tid(0), tableId(""), errorDir(""), setTime(0) {
  }

  virtual ~ClientService_bulkImportFiles_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  int64_t tid;
  std::string tableId;
  std::vector<std::string>  files;
  std::string errorDir;
  bool setTime;

  _ClientService_bulkImportFiles_args__isset __isset;

  bool operator == (const ClientService_bulkImportFiles_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(tableId == rhs.tableId))
      return false;
    if (!(files == rhs.files))
      return false;
    if (!(errorDir == rhs.errorDir))
      return false;
    if (!(setTime == rhs.setTime))
      return false;
    return true;
  }
  bool operator != (const ClientService_bulkImportFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_bulkImportFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_bulkImportFiles_pargs {
 public:


  virtual ~ClientService_bulkImportFiles_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const int64_t* tid;
  const std::string* tableId;
  const std::vector<std::string> * files;
  const std::string* errorDir;
  const bool* setTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_bulkImportFiles_result__isset {
  _ClientService_bulkImportFiles_result__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _ClientService_bulkImportFiles_result__isset;

class ClientService_bulkImportFiles_result {
 public:

  ClientService_bulkImportFiles_result() {
  }

  virtual ~ClientService_bulkImportFiles_result() throw() {}

  std::vector<std::string>  success;
  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_bulkImportFiles_result__isset __isset;

  bool operator == (const ClientService_bulkImportFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const ClientService_bulkImportFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_bulkImportFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_bulkImportFiles_presult__isset {
  _ClientService_bulkImportFiles_presult__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _ClientService_bulkImportFiles_presult__isset;

class ClientService_bulkImportFiles_presult {
 public:


  virtual ~ClientService_bulkImportFiles_presult() throw() {}

  std::vector<std::string> * success;
  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_bulkImportFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_isActive_args__isset {
  _ClientService_isActive_args__isset() : tinfo(false), tid(false) {}
  bool tinfo;
  bool tid;
} _ClientService_isActive_args__isset;

class ClientService_isActive_args {
 public:

  ClientService_isActive_args() : tid(0) {
  }

  virtual ~ClientService_isActive_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  int64_t tid;

  _ClientService_isActive_args__isset __isset;

  bool operator == (const ClientService_isActive_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(tid == rhs.tid))
      return false;
    return true;
  }
  bool operator != (const ClientService_isActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_isActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_isActive_pargs {
 public:


  virtual ~ClientService_isActive_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const int64_t* tid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_isActive_result__isset {
  _ClientService_isActive_result__isset() : success(false) {}
  bool success;
} _ClientService_isActive_result__isset;

class ClientService_isActive_result {
 public:

  ClientService_isActive_result() : success(0) {
  }

  virtual ~ClientService_isActive_result() throw() {}

  bool success;

  _ClientService_isActive_result__isset __isset;

  bool operator == (const ClientService_isActive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_isActive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_isActive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_isActive_presult__isset {
  _ClientService_isActive_presult__isset() : success(false) {}
  bool success;
} _ClientService_isActive_presult__isset;

class ClientService_isActive_presult {
 public:


  virtual ~ClientService_isActive_presult() throw() {}

  bool* success;

  _ClientService_isActive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_ping_args__isset {
  _ClientService_ping_args__isset() : credentials(false) {}
  bool credentials;
} _ClientService_ping_args__isset;

class ClientService_ping_args {
 public:

  ClientService_ping_args() {
  }

  virtual ~ClientService_ping_args() throw() {}

  accumulo::security::AuthInfo credentials;

  _ClientService_ping_args__isset __isset;

  bool operator == (const ClientService_ping_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const ClientService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_ping_pargs {
 public:


  virtual ~ClientService_ping_pargs() throw() {}

  const accumulo::security::AuthInfo* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_ping_result__isset {
  _ClientService_ping_result__isset() : sec(false) {}
  bool sec;
} _ClientService_ping_result__isset;

class ClientService_ping_result {
 public:

  ClientService_ping_result() {
  }

  virtual ~ClientService_ping_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_ping_result__isset __isset;

  bool operator == (const ClientService_ping_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_ping_presult__isset {
  _ClientService_ping_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_ping_presult__isset;

class ClientService_ping_presult {
 public:


  virtual ~ClientService_ping_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_authenticateUser_args__isset {
  _ClientService_authenticateUser_args__isset() : tinfo(false), credentials(false), user(false), password(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool password;
} _ClientService_authenticateUser_args__isset;

class ClientService_authenticateUser_args {
 public:

  ClientService_authenticateUser_args() : user(""), password("") {
  }

  virtual ~ClientService_authenticateUser_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::string password;

  _ClientService_authenticateUser_args__isset __isset;

  bool operator == (const ClientService_authenticateUser_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ClientService_authenticateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_authenticateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_authenticateUser_pargs {
 public:


  virtual ~ClientService_authenticateUser_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_authenticateUser_result__isset {
  _ClientService_authenticateUser_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_authenticateUser_result__isset;

class ClientService_authenticateUser_result {
 public:

  ClientService_authenticateUser_result() : success(0) {
  }

  virtual ~ClientService_authenticateUser_result() throw() {}

  bool success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_authenticateUser_result__isset __isset;

  bool operator == (const ClientService_authenticateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_authenticateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_authenticateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_authenticateUser_presult__isset {
  _ClientService_authenticateUser_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_authenticateUser_presult__isset;

class ClientService_authenticateUser_presult {
 public:


  virtual ~ClientService_authenticateUser_presult() throw() {}

  bool* success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_authenticateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_listUsers_args__isset {
  _ClientService_listUsers_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo;
  bool credentials;
} _ClientService_listUsers_args__isset;

class ClientService_listUsers_args {
 public:

  ClientService_listUsers_args() {
  }

  virtual ~ClientService_listUsers_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;

  _ClientService_listUsers_args__isset __isset;

  bool operator == (const ClientService_listUsers_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const ClientService_listUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_listUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_listUsers_pargs {
 public:


  virtual ~ClientService_listUsers_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_listUsers_result__isset {
  _ClientService_listUsers_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_listUsers_result__isset;

class ClientService_listUsers_result {
 public:

  ClientService_listUsers_result() {
  }

  virtual ~ClientService_listUsers_result() throw() {}

  std::set<std::string>  success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_listUsers_result__isset __isset;

  bool operator == (const ClientService_listUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_listUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_listUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_listUsers_presult__isset {
  _ClientService_listUsers_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_listUsers_presult__isset;

class ClientService_listUsers_presult {
 public:


  virtual ~ClientService_listUsers_presult() throw() {}

  std::set<std::string> * success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_listUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_createUser_args__isset {
  _ClientService_createUser_args__isset() : tinfo(false), credentials(false), user(false), password(false), authorizations(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool password;
  bool authorizations;
} _ClientService_createUser_args__isset;

class ClientService_createUser_args {
 public:

  ClientService_createUser_args() : user(""), password("") {
  }

  virtual ~ClientService_createUser_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::string password;
  std::vector<std::string>  authorizations;

  _ClientService_createUser_args__isset __isset;

  bool operator == (const ClientService_createUser_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(authorizations == rhs.authorizations))
      return false;
    return true;
  }
  bool operator != (const ClientService_createUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_createUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_createUser_pargs {
 public:


  virtual ~ClientService_createUser_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::string* password;
  const std::vector<std::string> * authorizations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_createUser_result__isset {
  _ClientService_createUser_result__isset() : sec(false) {}
  bool sec;
} _ClientService_createUser_result__isset;

class ClientService_createUser_result {
 public:

  ClientService_createUser_result() {
  }

  virtual ~ClientService_createUser_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_createUser_result__isset __isset;

  bool operator == (const ClientService_createUser_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_createUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_createUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_createUser_presult__isset {
  _ClientService_createUser_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_createUser_presult__isset;

class ClientService_createUser_presult {
 public:


  virtual ~ClientService_createUser_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_createUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_dropUser_args__isset {
  _ClientService_dropUser_args__isset() : tinfo(false), credentials(false), user(false) {}
  bool tinfo;
  bool credentials;
  bool user;
} _ClientService_dropUser_args__isset;

class ClientService_dropUser_args {
 public:

  ClientService_dropUser_args() : user("") {
  }

  virtual ~ClientService_dropUser_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;

  _ClientService_dropUser_args__isset __isset;

  bool operator == (const ClientService_dropUser_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const ClientService_dropUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_dropUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_dropUser_pargs {
 public:


  virtual ~ClientService_dropUser_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_dropUser_result__isset {
  _ClientService_dropUser_result__isset() : sec(false) {}
  bool sec;
} _ClientService_dropUser_result__isset;

class ClientService_dropUser_result {
 public:

  ClientService_dropUser_result() {
  }

  virtual ~ClientService_dropUser_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_dropUser_result__isset __isset;

  bool operator == (const ClientService_dropUser_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_dropUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_dropUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_dropUser_presult__isset {
  _ClientService_dropUser_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_dropUser_presult__isset;

class ClientService_dropUser_presult {
 public:


  virtual ~ClientService_dropUser_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_dropUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_changePassword_args__isset {
  _ClientService_changePassword_args__isset() : tinfo(false), credentials(false), user(false), password(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool password;
} _ClientService_changePassword_args__isset;

class ClientService_changePassword_args {
 public:

  ClientService_changePassword_args() : user(""), password("") {
  }

  virtual ~ClientService_changePassword_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::string password;

  _ClientService_changePassword_args__isset __isset;

  bool operator == (const ClientService_changePassword_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ClientService_changePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_changePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_changePassword_pargs {
 public:


  virtual ~ClientService_changePassword_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_changePassword_result__isset {
  _ClientService_changePassword_result__isset() : sec(false) {}
  bool sec;
} _ClientService_changePassword_result__isset;

class ClientService_changePassword_result {
 public:

  ClientService_changePassword_result() {
  }

  virtual ~ClientService_changePassword_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_changePassword_result__isset __isset;

  bool operator == (const ClientService_changePassword_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_changePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_changePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_changePassword_presult__isset {
  _ClientService_changePassword_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_changePassword_presult__isset;

class ClientService_changePassword_presult {
 public:


  virtual ~ClientService_changePassword_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_changePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_changeAuthorizations_args__isset {
  _ClientService_changeAuthorizations_args__isset() : tinfo(false), credentials(false), user(false), authorizations(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool authorizations;
} _ClientService_changeAuthorizations_args__isset;

class ClientService_changeAuthorizations_args {
 public:

  ClientService_changeAuthorizations_args() : user("") {
  }

  virtual ~ClientService_changeAuthorizations_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::vector<std::string>  authorizations;

  _ClientService_changeAuthorizations_args__isset __isset;

  bool operator == (const ClientService_changeAuthorizations_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(authorizations == rhs.authorizations))
      return false;
    return true;
  }
  bool operator != (const ClientService_changeAuthorizations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_changeAuthorizations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_changeAuthorizations_pargs {
 public:


  virtual ~ClientService_changeAuthorizations_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::vector<std::string> * authorizations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_changeAuthorizations_result__isset {
  _ClientService_changeAuthorizations_result__isset() : sec(false) {}
  bool sec;
} _ClientService_changeAuthorizations_result__isset;

class ClientService_changeAuthorizations_result {
 public:

  ClientService_changeAuthorizations_result() {
  }

  virtual ~ClientService_changeAuthorizations_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_changeAuthorizations_result__isset __isset;

  bool operator == (const ClientService_changeAuthorizations_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_changeAuthorizations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_changeAuthorizations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_changeAuthorizations_presult__isset {
  _ClientService_changeAuthorizations_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_changeAuthorizations_presult__isset;

class ClientService_changeAuthorizations_presult {
 public:


  virtual ~ClientService_changeAuthorizations_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_changeAuthorizations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_getUserAuthorizations_args__isset {
  _ClientService_getUserAuthorizations_args__isset() : tinfo(false), credentials(false), user(false) {}
  bool tinfo;
  bool credentials;
  bool user;
} _ClientService_getUserAuthorizations_args__isset;

class ClientService_getUserAuthorizations_args {
 public:

  ClientService_getUserAuthorizations_args() : user("") {
  }

  virtual ~ClientService_getUserAuthorizations_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;

  _ClientService_getUserAuthorizations_args__isset __isset;

  bool operator == (const ClientService_getUserAuthorizations_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const ClientService_getUserAuthorizations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getUserAuthorizations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getUserAuthorizations_pargs {
 public:


  virtual ~ClientService_getUserAuthorizations_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getUserAuthorizations_result__isset {
  _ClientService_getUserAuthorizations_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_getUserAuthorizations_result__isset;

class ClientService_getUserAuthorizations_result {
 public:

  ClientService_getUserAuthorizations_result() {
  }

  virtual ~ClientService_getUserAuthorizations_result() throw() {}

  std::vector<std::string>  success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_getUserAuthorizations_result__isset __isset;

  bool operator == (const ClientService_getUserAuthorizations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_getUserAuthorizations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getUserAuthorizations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getUserAuthorizations_presult__isset {
  _ClientService_getUserAuthorizations_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_getUserAuthorizations_presult__isset;

class ClientService_getUserAuthorizations_presult {
 public:


  virtual ~ClientService_getUserAuthorizations_presult() throw() {}

  std::vector<std::string> * success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_getUserAuthorizations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_hasSystemPermission_args__isset {
  _ClientService_hasSystemPermission_args__isset() : tinfo(false), credentials(false), user(false), sysPerm(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool sysPerm;
} _ClientService_hasSystemPermission_args__isset;

class ClientService_hasSystemPermission_args {
 public:

  ClientService_hasSystemPermission_args() : user(""), sysPerm(0) {
  }

  virtual ~ClientService_hasSystemPermission_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  int8_t sysPerm;

  _ClientService_hasSystemPermission_args__isset __isset;

  bool operator == (const ClientService_hasSystemPermission_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(sysPerm == rhs.sysPerm))
      return false;
    return true;
  }
  bool operator != (const ClientService_hasSystemPermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_hasSystemPermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_hasSystemPermission_pargs {
 public:


  virtual ~ClientService_hasSystemPermission_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const int8_t* sysPerm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_hasSystemPermission_result__isset {
  _ClientService_hasSystemPermission_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_hasSystemPermission_result__isset;

class ClientService_hasSystemPermission_result {
 public:

  ClientService_hasSystemPermission_result() : success(0) {
  }

  virtual ~ClientService_hasSystemPermission_result() throw() {}

  bool success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_hasSystemPermission_result__isset __isset;

  bool operator == (const ClientService_hasSystemPermission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_hasSystemPermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_hasSystemPermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_hasSystemPermission_presult__isset {
  _ClientService_hasSystemPermission_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _ClientService_hasSystemPermission_presult__isset;

class ClientService_hasSystemPermission_presult {
 public:


  virtual ~ClientService_hasSystemPermission_presult() throw() {}

  bool* success;
  accumulo::security::ThriftSecurityException sec;

  _ClientService_hasSystemPermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_hasTablePermission_args__isset {
  _ClientService_hasTablePermission_args__isset() : tinfo(false), credentials(false), user(false), tableName(false), tblPerm(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool tableName;
  bool tblPerm;
} _ClientService_hasTablePermission_args__isset;

class ClientService_hasTablePermission_args {
 public:

  ClientService_hasTablePermission_args() : user(""), tableName(""), tblPerm(0) {
  }

  virtual ~ClientService_hasTablePermission_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::string tableName;
  int8_t tblPerm;

  _ClientService_hasTablePermission_args__isset __isset;

  bool operator == (const ClientService_hasTablePermission_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(tblPerm == rhs.tblPerm))
      return false;
    return true;
  }
  bool operator != (const ClientService_hasTablePermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_hasTablePermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_hasTablePermission_pargs {
 public:


  virtual ~ClientService_hasTablePermission_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::string* tableName;
  const int8_t* tblPerm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_hasTablePermission_result__isset {
  _ClientService_hasTablePermission_result__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _ClientService_hasTablePermission_result__isset;

class ClientService_hasTablePermission_result {
 public:

  ClientService_hasTablePermission_result() : success(0) {
  }

  virtual ~ClientService_hasTablePermission_result() throw() {}

  bool success;
  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_hasTablePermission_result__isset __isset;

  bool operator == (const ClientService_hasTablePermission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const ClientService_hasTablePermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_hasTablePermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_hasTablePermission_presult__isset {
  _ClientService_hasTablePermission_presult__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _ClientService_hasTablePermission_presult__isset;

class ClientService_hasTablePermission_presult {
 public:


  virtual ~ClientService_hasTablePermission_presult() throw() {}

  bool* success;
  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_hasTablePermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_grantSystemPermission_args__isset {
  _ClientService_grantSystemPermission_args__isset() : tinfo(false), credentials(false), user(false), permission(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool permission;
} _ClientService_grantSystemPermission_args__isset;

class ClientService_grantSystemPermission_args {
 public:

  ClientService_grantSystemPermission_args() : user(""), permission(0) {
  }

  virtual ~ClientService_grantSystemPermission_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  int8_t permission;

  _ClientService_grantSystemPermission_args__isset __isset;

  bool operator == (const ClientService_grantSystemPermission_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const ClientService_grantSystemPermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_grantSystemPermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_grantSystemPermission_pargs {
 public:


  virtual ~ClientService_grantSystemPermission_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const int8_t* permission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_grantSystemPermission_result__isset {
  _ClientService_grantSystemPermission_result__isset() : sec(false) {}
  bool sec;
} _ClientService_grantSystemPermission_result__isset;

class ClientService_grantSystemPermission_result {
 public:

  ClientService_grantSystemPermission_result() {
  }

  virtual ~ClientService_grantSystemPermission_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_grantSystemPermission_result__isset __isset;

  bool operator == (const ClientService_grantSystemPermission_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_grantSystemPermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_grantSystemPermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_grantSystemPermission_presult__isset {
  _ClientService_grantSystemPermission_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_grantSystemPermission_presult__isset;

class ClientService_grantSystemPermission_presult {
 public:


  virtual ~ClientService_grantSystemPermission_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_grantSystemPermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_revokeSystemPermission_args__isset {
  _ClientService_revokeSystemPermission_args__isset() : tinfo(false), credentials(false), user(false), permission(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool permission;
} _ClientService_revokeSystemPermission_args__isset;

class ClientService_revokeSystemPermission_args {
 public:

  ClientService_revokeSystemPermission_args() : user(""), permission(0) {
  }

  virtual ~ClientService_revokeSystemPermission_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  int8_t permission;

  _ClientService_revokeSystemPermission_args__isset __isset;

  bool operator == (const ClientService_revokeSystemPermission_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const ClientService_revokeSystemPermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_revokeSystemPermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_revokeSystemPermission_pargs {
 public:


  virtual ~ClientService_revokeSystemPermission_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const int8_t* permission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_revokeSystemPermission_result__isset {
  _ClientService_revokeSystemPermission_result__isset() : sec(false) {}
  bool sec;
} _ClientService_revokeSystemPermission_result__isset;

class ClientService_revokeSystemPermission_result {
 public:

  ClientService_revokeSystemPermission_result() {
  }

  virtual ~ClientService_revokeSystemPermission_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_revokeSystemPermission_result__isset __isset;

  bool operator == (const ClientService_revokeSystemPermission_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const ClientService_revokeSystemPermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_revokeSystemPermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_revokeSystemPermission_presult__isset {
  _ClientService_revokeSystemPermission_presult__isset() : sec(false) {}
  bool sec;
} _ClientService_revokeSystemPermission_presult__isset;

class ClientService_revokeSystemPermission_presult {
 public:


  virtual ~ClientService_revokeSystemPermission_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _ClientService_revokeSystemPermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_grantTablePermission_args__isset {
  _ClientService_grantTablePermission_args__isset() : tinfo(false), credentials(false), user(false), tableName(false), permission(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool tableName;
  bool permission;
} _ClientService_grantTablePermission_args__isset;

class ClientService_grantTablePermission_args {
 public:

  ClientService_grantTablePermission_args() : user(""), tableName(""), permission(0) {
  }

  virtual ~ClientService_grantTablePermission_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::string tableName;
  int8_t permission;

  _ClientService_grantTablePermission_args__isset __isset;

  bool operator == (const ClientService_grantTablePermission_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const ClientService_grantTablePermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_grantTablePermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_grantTablePermission_pargs {
 public:


  virtual ~ClientService_grantTablePermission_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::string* tableName;
  const int8_t* permission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_grantTablePermission_result__isset {
  _ClientService_grantTablePermission_result__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _ClientService_grantTablePermission_result__isset;

class ClientService_grantTablePermission_result {
 public:

  ClientService_grantTablePermission_result() {
  }

  virtual ~ClientService_grantTablePermission_result() throw() {}

  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_grantTablePermission_result__isset __isset;

  bool operator == (const ClientService_grantTablePermission_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const ClientService_grantTablePermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_grantTablePermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_grantTablePermission_presult__isset {
  _ClientService_grantTablePermission_presult__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _ClientService_grantTablePermission_presult__isset;

class ClientService_grantTablePermission_presult {
 public:


  virtual ~ClientService_grantTablePermission_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_grantTablePermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_revokeTablePermission_args__isset {
  _ClientService_revokeTablePermission_args__isset() : tinfo(false), credentials(false), user(false), tableName(false), permission(false) {}
  bool tinfo;
  bool credentials;
  bool user;
  bool tableName;
  bool permission;
} _ClientService_revokeTablePermission_args__isset;

class ClientService_revokeTablePermission_args {
 public:

  ClientService_revokeTablePermission_args() : user(""), tableName(""), permission(0) {
  }

  virtual ~ClientService_revokeTablePermission_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string user;
  std::string tableName;
  int8_t permission;

  _ClientService_revokeTablePermission_args__isset __isset;

  bool operator == (const ClientService_revokeTablePermission_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const ClientService_revokeTablePermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_revokeTablePermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_revokeTablePermission_pargs {
 public:


  virtual ~ClientService_revokeTablePermission_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* user;
  const std::string* tableName;
  const int8_t* permission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_revokeTablePermission_result__isset {
  _ClientService_revokeTablePermission_result__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _ClientService_revokeTablePermission_result__isset;

class ClientService_revokeTablePermission_result {
 public:

  ClientService_revokeTablePermission_result() {
  }

  virtual ~ClientService_revokeTablePermission_result() throw() {}

  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_revokeTablePermission_result__isset __isset;

  bool operator == (const ClientService_revokeTablePermission_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const ClientService_revokeTablePermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_revokeTablePermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_revokeTablePermission_presult__isset {
  _ClientService_revokeTablePermission_presult__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _ClientService_revokeTablePermission_presult__isset;

class ClientService_revokeTablePermission_presult {
 public:


  virtual ~ClientService_revokeTablePermission_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;
  ThriftTableOperationException tope;

  _ClientService_revokeTablePermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_getConfiguration_args__isset {
  _ClientService_getConfiguration_args__isset() : type(false) {}
  bool type;
} _ClientService_getConfiguration_args__isset;

class ClientService_getConfiguration_args {
 public:

  ClientService_getConfiguration_args() {
  }

  virtual ~ClientService_getConfiguration_args() throw() {}

  ConfigurationType::type type;

  _ClientService_getConfiguration_args__isset __isset;

  bool operator == (const ClientService_getConfiguration_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ClientService_getConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getConfiguration_pargs {
 public:


  virtual ~ClientService_getConfiguration_pargs() throw() {}

  const ConfigurationType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getConfiguration_result__isset {
  _ClientService_getConfiguration_result__isset() : success(false) {}
  bool success;
} _ClientService_getConfiguration_result__isset;

class ClientService_getConfiguration_result {
 public:

  ClientService_getConfiguration_result() {
  }

  virtual ~ClientService_getConfiguration_result() throw() {}

  std::map<std::string, std::string>  success;

  _ClientService_getConfiguration_result__isset __isset;

  bool operator == (const ClientService_getConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_getConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getConfiguration_presult__isset {
  _ClientService_getConfiguration_presult__isset() : success(false) {}
  bool success;
} _ClientService_getConfiguration_presult__isset;

class ClientService_getConfiguration_presult {
 public:


  virtual ~ClientService_getConfiguration_presult() throw() {}

  std::map<std::string, std::string> * success;

  _ClientService_getConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_getTableConfiguration_args__isset {
  _ClientService_getTableConfiguration_args__isset() : tableName(false) {}
  bool tableName;
} _ClientService_getTableConfiguration_args__isset;

class ClientService_getTableConfiguration_args {
 public:

  ClientService_getTableConfiguration_args() : tableName("") {
  }

  virtual ~ClientService_getTableConfiguration_args() throw() {}

  std::string tableName;

  _ClientService_getTableConfiguration_args__isset __isset;

  bool operator == (const ClientService_getTableConfiguration_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const ClientService_getTableConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getTableConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getTableConfiguration_pargs {
 public:


  virtual ~ClientService_getTableConfiguration_pargs() throw() {}

  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getTableConfiguration_result__isset {
  _ClientService_getTableConfiguration_result__isset() : success(false), tope(false) {}
  bool success;
  bool tope;
} _ClientService_getTableConfiguration_result__isset;

class ClientService_getTableConfiguration_result {
 public:

  ClientService_getTableConfiguration_result() {
  }

  virtual ~ClientService_getTableConfiguration_result() throw() {}

  std::map<std::string, std::string>  success;
  ThriftTableOperationException tope;

  _ClientService_getTableConfiguration_result__isset __isset;

  bool operator == (const ClientService_getTableConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const ClientService_getTableConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getTableConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getTableConfiguration_presult__isset {
  _ClientService_getTableConfiguration_presult__isset() : success(false), tope(false) {}
  bool success;
  bool tope;
} _ClientService_getTableConfiguration_presult__isset;

class ClientService_getTableConfiguration_presult {
 public:


  virtual ~ClientService_getTableConfiguration_presult() throw() {}

  std::map<std::string, std::string> * success;
  ThriftTableOperationException tope;

  _ClientService_getTableConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_checkClass_args__isset {
  _ClientService_checkClass_args__isset() : tinfo(false), className(false), interfaceMatch(false) {}
  bool tinfo;
  bool className;
  bool interfaceMatch;
} _ClientService_checkClass_args__isset;

class ClientService_checkClass_args {
 public:

  ClientService_checkClass_args() : className(""), interfaceMatch("") {
  }

  virtual ~ClientService_checkClass_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  std::string className;
  std::string interfaceMatch;

  _ClientService_checkClass_args__isset __isset;

  bool operator == (const ClientService_checkClass_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(className == rhs.className))
      return false;
    if (!(interfaceMatch == rhs.interfaceMatch))
      return false;
    return true;
  }
  bool operator != (const ClientService_checkClass_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_checkClass_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_checkClass_pargs {
 public:


  virtual ~ClientService_checkClass_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const std::string* className;
  const std::string* interfaceMatch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_checkClass_result__isset {
  _ClientService_checkClass_result__isset() : success(false) {}
  bool success;
} _ClientService_checkClass_result__isset;

class ClientService_checkClass_result {
 public:

  ClientService_checkClass_result() : success(0) {
  }

  virtual ~ClientService_checkClass_result() throw() {}

  bool success;

  _ClientService_checkClass_result__isset __isset;

  bool operator == (const ClientService_checkClass_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_checkClass_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_checkClass_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_checkClass_presult__isset {
  _ClientService_checkClass_presult__isset() : success(false) {}
  bool success;
} _ClientService_checkClass_presult__isset;

class ClientService_checkClass_presult {
 public:


  virtual ~ClientService_checkClass_presult() throw() {}

  bool* success;

  _ClientService_checkClass_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientServiceClient : virtual public ClientServiceIf {
 public:
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getRootTabletLocation(std::string& _return);
  void send_getRootTabletLocation();
  void recv_getRootTabletLocation(std::string& _return);
  void getInstanceId(std::string& _return);
  void send_getInstanceId();
  void recv_getInstanceId(std::string& _return);
  void getZooKeepers(std::string& _return);
  void send_getZooKeepers();
  void recv_getZooKeepers(std::string& _return);
  void bulkImportFiles(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t tid, const std::string& tableId, const std::vector<std::string> & files, const std::string& errorDir, const bool setTime);
  void send_bulkImportFiles(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t tid, const std::string& tableId, const std::vector<std::string> & files, const std::string& errorDir, const bool setTime);
  void recv_bulkImportFiles(std::vector<std::string> & _return);
  bool isActive(const accumulo::cloudtrace::TInfo& tinfo, const int64_t tid);
  void send_isActive(const accumulo::cloudtrace::TInfo& tinfo, const int64_t tid);
  bool recv_isActive();
  void ping(const accumulo::security::AuthInfo& credentials);
  void send_ping(const accumulo::security::AuthInfo& credentials);
  void recv_ping();
  bool authenticateUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password);
  void send_authenticateUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password);
  bool recv_authenticateUser();
  void listUsers(std::set<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void send_listUsers(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void recv_listUsers(std::set<std::string> & _return);
  void createUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password, const std::vector<std::string> & authorizations);
  void send_createUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password, const std::vector<std::string> & authorizations);
  void recv_createUser();
  void dropUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user);
  void send_dropUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user);
  void recv_dropUser();
  void changePassword(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password);
  void send_changePassword(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password);
  void recv_changePassword();
  void changeAuthorizations(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::vector<std::string> & authorizations);
  void send_changeAuthorizations(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::vector<std::string> & authorizations);
  void recv_changeAuthorizations();
  void getUserAuthorizations(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user);
  void send_getUserAuthorizations(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user);
  void recv_getUserAuthorizations(std::vector<std::string> & _return);
  bool hasSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t sysPerm);
  void send_hasSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t sysPerm);
  bool recv_hasSystemPermission();
  bool hasTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t tblPerm);
  void send_hasTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t tblPerm);
  bool recv_hasTablePermission();
  void grantSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission);
  void send_grantSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission);
  void recv_grantSystemPermission();
  void revokeSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission);
  void send_revokeSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission);
  void recv_revokeSystemPermission();
  void grantTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission);
  void send_grantTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission);
  void recv_grantTablePermission();
  void revokeTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission);
  void send_revokeTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission);
  void recv_revokeTablePermission();
  void getConfiguration(std::map<std::string, std::string> & _return, const ConfigurationType::type type);
  void send_getConfiguration(const ConfigurationType::type type);
  void recv_getConfiguration(std::map<std::string, std::string> & _return);
  void getTableConfiguration(std::map<std::string, std::string> & _return, const std::string& tableName);
  void send_getTableConfiguration(const std::string& tableName);
  void recv_getTableConfiguration(std::map<std::string, std::string> & _return);
  bool checkClass(const accumulo::cloudtrace::TInfo& tinfo, const std::string& className, const std::string& interfaceMatch);
  void send_checkClass(const accumulo::cloudtrace::TInfo& tinfo, const std::string& className, const std::string& interfaceMatch);
  bool recv_checkClass();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ClientServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getRootTabletLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInstanceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getZooKeepers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkImportFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dropUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeAuthorizations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserAuthorizations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hasSystemPermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hasTablePermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_grantSystemPermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokeSystemPermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_grantTablePermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokeTablePermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkClass(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientServiceProcessor(boost::shared_ptr<ClientServiceIf> iface) :
    iface_(iface) {
    processMap_["getRootTabletLocation"] = &ClientServiceProcessor::process_getRootTabletLocation;
    processMap_["getInstanceId"] = &ClientServiceProcessor::process_getInstanceId;
    processMap_["getZooKeepers"] = &ClientServiceProcessor::process_getZooKeepers;
    processMap_["bulkImportFiles"] = &ClientServiceProcessor::process_bulkImportFiles;
    processMap_["isActive"] = &ClientServiceProcessor::process_isActive;
    processMap_["ping"] = &ClientServiceProcessor::process_ping;
    processMap_["authenticateUser"] = &ClientServiceProcessor::process_authenticateUser;
    processMap_["listUsers"] = &ClientServiceProcessor::process_listUsers;
    processMap_["createUser"] = &ClientServiceProcessor::process_createUser;
    processMap_["dropUser"] = &ClientServiceProcessor::process_dropUser;
    processMap_["changePassword"] = &ClientServiceProcessor::process_changePassword;
    processMap_["changeAuthorizations"] = &ClientServiceProcessor::process_changeAuthorizations;
    processMap_["getUserAuthorizations"] = &ClientServiceProcessor::process_getUserAuthorizations;
    processMap_["hasSystemPermission"] = &ClientServiceProcessor::process_hasSystemPermission;
    processMap_["hasTablePermission"] = &ClientServiceProcessor::process_hasTablePermission;
    processMap_["grantSystemPermission"] = &ClientServiceProcessor::process_grantSystemPermission;
    processMap_["revokeSystemPermission"] = &ClientServiceProcessor::process_revokeSystemPermission;
    processMap_["grantTablePermission"] = &ClientServiceProcessor::process_grantTablePermission;
    processMap_["revokeTablePermission"] = &ClientServiceProcessor::process_revokeTablePermission;
    processMap_["getConfiguration"] = &ClientServiceProcessor::process_getConfiguration;
    processMap_["getTableConfiguration"] = &ClientServiceProcessor::process_getTableConfiguration;
    processMap_["checkClass"] = &ClientServiceProcessor::process_checkClass;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ClientServiceProcessor() {}
};

class ClientServiceMultiface : virtual public ClientServiceIf {
 public:
  ClientServiceMultiface(std::vector<boost::shared_ptr<ClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientServiceIf> > ifaces_;
  ClientServiceMultiface() {}
  void add(boost::shared_ptr<ClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getRootTabletLocation(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getRootTabletLocation(_return);
        return;
      } else {
        ifaces_[i]->getRootTabletLocation(_return);
      }
    }
  }

  void getInstanceId(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getInstanceId(_return);
        return;
      } else {
        ifaces_[i]->getInstanceId(_return);
      }
    }
  }

  void getZooKeepers(std::string& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getZooKeepers(_return);
        return;
      } else {
        ifaces_[i]->getZooKeepers(_return);
      }
    }
  }

  void bulkImportFiles(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t tid, const std::string& tableId, const std::vector<std::string> & files, const std::string& errorDir, const bool setTime) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->bulkImportFiles(_return, tinfo, credentials, tid, tableId, files, errorDir, setTime);
        return;
      } else {
        ifaces_[i]->bulkImportFiles(_return, tinfo, credentials, tid, tableId, files, errorDir, setTime);
      }
    }
  }

  bool isActive(const accumulo::cloudtrace::TInfo& tinfo, const int64_t tid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->isActive(tinfo, tid);
      } else {
        ifaces_[i]->isActive(tinfo, tid);
      }
    }
  }

  void ping(const accumulo::security::AuthInfo& credentials) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping(credentials);
    }
  }

  bool authenticateUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->authenticateUser(tinfo, credentials, user, password);
      } else {
        ifaces_[i]->authenticateUser(tinfo, credentials, user, password);
      }
    }
  }

  void listUsers(std::set<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->listUsers(_return, tinfo, credentials);
        return;
      } else {
        ifaces_[i]->listUsers(_return, tinfo, credentials);
      }
    }
  }

  void createUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password, const std::vector<std::string> & authorizations) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->createUser(tinfo, credentials, user, password, authorizations);
    }
  }

  void dropUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->dropUser(tinfo, credentials, user);
    }
  }

  void changePassword(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->changePassword(tinfo, credentials, user, password);
    }
  }

  void changeAuthorizations(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::vector<std::string> & authorizations) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->changeAuthorizations(tinfo, credentials, user, authorizations);
    }
  }

  void getUserAuthorizations(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getUserAuthorizations(_return, tinfo, credentials, user);
        return;
      } else {
        ifaces_[i]->getUserAuthorizations(_return, tinfo, credentials, user);
      }
    }
  }

  bool hasSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t sysPerm) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->hasSystemPermission(tinfo, credentials, user, sysPerm);
      } else {
        ifaces_[i]->hasSystemPermission(tinfo, credentials, user, sysPerm);
      }
    }
  }

  bool hasTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t tblPerm) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->hasTablePermission(tinfo, credentials, user, tableName, tblPerm);
      } else {
        ifaces_[i]->hasTablePermission(tinfo, credentials, user, tableName, tblPerm);
      }
    }
  }

  void grantSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->grantSystemPermission(tinfo, credentials, user, permission);
    }
  }

  void revokeSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->revokeSystemPermission(tinfo, credentials, user, permission);
    }
  }

  void grantTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->grantTablePermission(tinfo, credentials, user, tableName, permission);
    }
  }

  void revokeTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->revokeTablePermission(tinfo, credentials, user, tableName, permission);
    }
  }

  void getConfiguration(std::map<std::string, std::string> & _return, const ConfigurationType::type type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getConfiguration(_return, type);
        return;
      } else {
        ifaces_[i]->getConfiguration(_return, type);
      }
    }
  }

  void getTableConfiguration(std::map<std::string, std::string> & _return, const std::string& tableName) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getTableConfiguration(_return, tableName);
        return;
      } else {
        ifaces_[i]->getTableConfiguration(_return, tableName);
      }
    }
  }

  bool checkClass(const accumulo::cloudtrace::TInfo& tinfo, const std::string& className, const std::string& interfaceMatch) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->checkClass(tinfo, className, interfaceMatch);
      } else {
        ifaces_[i]->checkClass(tinfo, className, interfaceMatch);
      }
    }
  }

};

}} // namespace

#endif
