/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef SpanReceiver_H
#define SpanReceiver_H

#include <TProcessor.h>
#include "cloudtrace_types.h"

namespace accumulo { namespace cloudtrace {

class SpanReceiverIf {
 public:
  virtual ~SpanReceiverIf() {}
  virtual void span(const RemoteSpan& span) = 0;
};

class SpanReceiverNull : virtual public SpanReceiverIf {
 public:
  virtual ~SpanReceiverNull() {}
  void span(const RemoteSpan& /* span */) {
    return;
  }
};

typedef struct _SpanReceiver_span_args__isset {
  _SpanReceiver_span_args__isset() : span(false) {}
  bool span;
} _SpanReceiver_span_args__isset;

class SpanReceiver_span_args {
 public:

  SpanReceiver_span_args() {
  }

  virtual ~SpanReceiver_span_args() throw() {}

  RemoteSpan span;

  _SpanReceiver_span_args__isset __isset;

  bool operator == (const SpanReceiver_span_args & rhs) const
  {
    if (!(span == rhs.span))
      return false;
    return true;
  }
  bool operator != (const SpanReceiver_span_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpanReceiver_span_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SpanReceiver_span_pargs {
 public:


  virtual ~SpanReceiver_span_pargs() throw() {}

  const RemoteSpan* span;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class SpanReceiverClient : virtual public SpanReceiverIf {
 public:
  SpanReceiverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SpanReceiverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void span(const RemoteSpan& span);
  void send_span(const RemoteSpan& span);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SpanReceiverProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SpanReceiverIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SpanReceiverProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_span(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SpanReceiverProcessor(boost::shared_ptr<SpanReceiverIf> iface) :
    iface_(iface) {
    processMap_["span"] = &SpanReceiverProcessor::process_span;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SpanReceiverProcessor() {}
};

class SpanReceiverMultiface : virtual public SpanReceiverIf {
 public:
  SpanReceiverMultiface(std::vector<boost::shared_ptr<SpanReceiverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SpanReceiverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SpanReceiverIf> > ifaces_;
  SpanReceiverMultiface() {}
  void add(boost::shared_ptr<SpanReceiverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void span(const RemoteSpan& span) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->span(span);
    }
  }

};

}} // namespace

#endif
