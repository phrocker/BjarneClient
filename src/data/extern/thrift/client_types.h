/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef client_TYPES_H
#define client_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "security_types.h"
#include "cloudtrace_types.h"


namespace accumulo { namespace client {

struct TableOperation {
  enum type {
    CREATE = 0,
    DELETE = 1,
    RENAME = 2,
    SET_PROPERTY = 3,
    REMOVE_PROPERTY = 4,
    OFFLINE = 5,
    ONLINE = 6,
    FLUSH = 7,
    PERMISSION = 8,
    CLONE = 9,
    MERGE = 10,
    DELETE_RANGE = 11,
    BULK_IMPORT = 12,
    COMPACT = 13
  };
};

extern const std::map<int, const char*> _TableOperation_VALUES_TO_NAMES;

struct TableOperationExceptionType {
  enum type {
    EXISTS = 0,
    NOTFOUND = 1,
    OFFLINE = 2,
    BULK_BAD_INPUT_DIRECTORY = 3,
    BULK_BAD_ERROR_DIRECTORY = 4,
    BAD_RANGE = 5,
    OTHER = 6
  };
};

extern const std::map<int, const char*> _TableOperationExceptionType_VALUES_TO_NAMES;

struct ConfigurationType {
  enum type {
    CURRENT = 0,
    SITE = 1,
    DEFAULT = 2
  };
};

extern const std::map<int, const char*> _ConfigurationType_VALUES_TO_NAMES;

typedef struct _ThriftTableOperationException__isset {
  _ThriftTableOperationException__isset() : tableId(false), tableName(false), op(false), type(false), description(false) {}
  bool tableId;
  bool tableName;
  bool op;
  bool type;
  bool description;
} _ThriftTableOperationException__isset;

class ThriftTableOperationException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "25ADB6C99E620F729A978F0716AE3156";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0xAD,0xB6,0xC9,0x9E,0x62,0x0F,0x72,0x9A,0x97,0x8F,0x07,0x16,0xAE,0x31,0x56};

  ThriftTableOperationException() : tableId(""), tableName(""), description("") {
  }

  virtual ~ThriftTableOperationException() throw() {}

  std::string tableId;
  std::string tableName;
  TableOperation::type op;
  TableOperationExceptionType::type type;
  std::string description;

  _ThriftTableOperationException__isset __isset;

  bool operator == (const ThriftTableOperationException & rhs) const
  {
    if (!(tableId == rhs.tableId))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const ThriftTableOperationException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftTableOperationException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
