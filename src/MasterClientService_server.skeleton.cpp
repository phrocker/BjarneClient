// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MasterClientService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace accumulo::master;

class MasterClientServiceHandler : virtual public MasterClientServiceIf {
 public:
  MasterClientServiceHandler() {
    // Your initialization goes here
  }

  int64_t initiateFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName) {
    // Your implementation goes here
    printf("initiateFlush\n");
  }

  void waitForFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& startRow, const std::string& endRow, const int64_t flushID, const int64_t maxLoops) {
    // Your implementation goes here
    printf("waitForFlush\n");
  }

  void setTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property, const std::string& value) {
    // Your implementation goes here
    printf("setTableProperty\n");
  }

  void removeTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property) {
    // Your implementation goes here
    printf("removeTableProperty\n");
  }

  void setMasterGoalState(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const MasterGoalState::type state) {
    // Your implementation goes here
    printf("setMasterGoalState\n");
  }

  void shutdown(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const bool stopTabletServers) {
    // Your implementation goes here
    printf("shutdown\n");
  }

  void shutdownTabletServer(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tabletServer, const bool force) {
    // Your implementation goes here
    printf("shutdownTabletServer\n");
  }

  void setSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property, const std::string& value) {
    // Your implementation goes here
    printf("setSystemProperty\n");
  }

  void removeSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property) {
    // Your implementation goes here
    printf("removeSystemProperty\n");
  }

  void getMasterStats(MasterMonitorInfo& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("getMasterStats\n");
  }

  void reportSplitExtent(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletSplit& split) {
    // Your implementation goes here
    printf("reportSplitExtent\n");
  }

  void reportTabletStatus(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletLoadState::type status, const accumulo::data::TKeyExtent& tablet) {
    // Your implementation goes here
    printf("reportTabletStatus\n");
  }

  int64_t beginTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("beginTableOperation\n");
  }

  void executeTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid, const TableOperation::type op, const std::vector<std::string> & arguments, const std::map<std::string, std::string> & options, const bool autoClean) {
    // Your implementation goes here
    printf("executeTableOperation\n");
  }

  void waitForTableOperation(std::string& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid) {
    // Your implementation goes here
    printf("waitForTableOperation\n");
  }

  void finishTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid) {
    // Your implementation goes here
    printf("finishTableOperation\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MasterClientServiceHandler> handler(new MasterClientServiceHandler());
  shared_ptr<TProcessor> processor(new MasterClientServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

