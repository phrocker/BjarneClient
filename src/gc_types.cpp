/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "gc_types.h"

namespace accumulo { namespace gc {

const char* GcCycleStats::ascii_fingerprint = "FD11249ACE8A1CE79C544B3DBECE03F7";
const uint8_t GcCycleStats::binary_fingerprint[16] = {0xFD,0x11,0x24,0x9A,0xCE,0x8A,0x1C,0xE7,0x9C,0x54,0x4B,0x3D,0xBE,0xCE,0x03,0xF7};

uint32_t GcCycleStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finished);
          this->__isset.finished = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->candidates);
          this->__isset.candidates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inUse);
          this->__isset.inUse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deleted);
          this->__isset.deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->errors);
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GcCycleStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GcCycleStats");
  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("finished", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->finished);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("candidates", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->candidates);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("inUse", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->inUse);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("deleted", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->deleted);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->errors);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* GCStatus::ascii_fingerprint = "F24ADFF7BE7AC37225314C08B2624E5A";
const uint8_t GCStatus::binary_fingerprint[16] = {0xF2,0x4A,0xDF,0xF7,0xBE,0x7A,0xC3,0x72,0x25,0x31,0x4C,0x08,0xB2,0x62,0x4E,0x5A};

uint32_t GCStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->last.read(iprot);
          this->__isset.last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lastLog.read(iprot);
          this->__isset.lastLog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->current.read(iprot);
          this->__isset.current = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->currentLog.read(iprot);
          this->__isset.currentLog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GCStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GCStatus");
  xfer += oprot->writeFieldBegin("last", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->last.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lastLog", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->lastLog.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("current", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->current.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("currentLog", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->currentLog.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
