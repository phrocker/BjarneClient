/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef MasterClientService_H
#define MasterClientService_H

#include <TProcessor.h>
#include "master_types.h"

namespace accumulo { namespace master {

class MasterClientServiceIf {
 public:
  virtual ~MasterClientServiceIf() {}
  virtual int64_t initiateFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName) = 0;
  virtual void waitForFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& startRow, const std::string& endRow, const int64_t flushID, const int64_t maxLoops) = 0;
  virtual void setTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property, const std::string& value) = 0;
  virtual void removeTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property) = 0;
  virtual void setMasterGoalState(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const MasterGoalState::type state) = 0;
  virtual void shutdown(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const bool stopTabletServers) = 0;
  virtual void shutdownTabletServer(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tabletServer, const bool force) = 0;
  virtual void setSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property, const std::string& value) = 0;
  virtual void removeSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property) = 0;
  virtual void getMasterStats(MasterMonitorInfo& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) = 0;
  virtual void reportSplitExtent(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletSplit& split) = 0;
  virtual void reportTabletStatus(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletLoadState::type status, const accumulo::data::TKeyExtent& tablet) = 0;
  virtual int64_t beginTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) = 0;
  virtual void executeTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid, const TableOperation::type op, const std::vector<std::string> & arguments, const std::map<std::string, std::string> & options, const bool autoClean) = 0;
  virtual void waitForTableOperation(std::string& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid) = 0;
  virtual void finishTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid) = 0;
};

class MasterClientServiceNull : virtual public MasterClientServiceIf {
 public:
  virtual ~MasterClientServiceNull() {}
  int64_t initiateFlush(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* tableName */) {
    int64_t _return = 0;
    return _return;
  }
  void waitForFlush(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* tableName */, const std::string& /* startRow */, const std::string& /* endRow */, const int64_t /* flushID */, const int64_t /* maxLoops */) {
    return;
  }
  void setTableProperty(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* tableName */, const std::string& /* property */, const std::string& /* value */) {
    return;
  }
  void removeTableProperty(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* tableName */, const std::string& /* property */) {
    return;
  }
  void setMasterGoalState(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const MasterGoalState::type /* state */) {
    return;
  }
  void shutdown(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const bool /* stopTabletServers */) {
    return;
  }
  void shutdownTabletServer(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* tabletServer */, const bool /* force */) {
    return;
  }
  void setSystemProperty(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* property */, const std::string& /* value */) {
    return;
  }
  void removeSystemProperty(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* property */) {
    return;
  }
  void getMasterStats(MasterMonitorInfo& /* _return */, const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */) {
    return;
  }
  void reportSplitExtent(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* serverName */, const TabletSplit& /* split */) {
    return;
  }
  void reportTabletStatus(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const std::string& /* serverName */, const TabletLoadState::type /* status */, const accumulo::data::TKeyExtent& /* tablet */) {
    return;
  }
  int64_t beginTableOperation(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */) {
    int64_t _return = 0;
    return _return;
  }
  void executeTableOperation(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const int64_t /* opid */, const TableOperation::type /* op */, const std::vector<std::string> & /* arguments */, const std::map<std::string, std::string> & /* options */, const bool /* autoClean */) {
    return;
  }
  void waitForTableOperation(std::string& /* _return */, const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const int64_t /* opid */) {
    return;
  }
  void finishTableOperation(const accumulo::cloudtrace::TInfo& /* tinfo */, const accumulo::security::AuthInfo& /* credentials */, const int64_t /* opid */) {
    return;
  }
};

typedef struct _MasterClientService_initiateFlush_args__isset {
  _MasterClientService_initiateFlush_args__isset() : tinfo(false), credentials(false), tableName(false) {}
  bool tinfo;
  bool credentials;
  bool tableName;
} _MasterClientService_initiateFlush_args__isset;

class MasterClientService_initiateFlush_args {
 public:

  MasterClientService_initiateFlush_args() : tableName("") {
  }

  virtual ~MasterClientService_initiateFlush_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string tableName;

  _MasterClientService_initiateFlush_args__isset __isset;

  bool operator == (const MasterClientService_initiateFlush_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_initiateFlush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_initiateFlush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_initiateFlush_pargs {
 public:


  virtual ~MasterClientService_initiateFlush_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_initiateFlush_result__isset {
  _MasterClientService_initiateFlush_result__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _MasterClientService_initiateFlush_result__isset;

class MasterClientService_initiateFlush_result {
 public:

  MasterClientService_initiateFlush_result() : success(0) {
  }

  virtual ~MasterClientService_initiateFlush_result() throw() {}

  int64_t success;
  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_initiateFlush_result__isset __isset;

  bool operator == (const MasterClientService_initiateFlush_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_initiateFlush_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_initiateFlush_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_initiateFlush_presult__isset {
  _MasterClientService_initiateFlush_presult__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _MasterClientService_initiateFlush_presult__isset;

class MasterClientService_initiateFlush_presult {
 public:


  virtual ~MasterClientService_initiateFlush_presult() throw() {}

  int64_t* success;
  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_initiateFlush_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_waitForFlush_args__isset {
  _MasterClientService_waitForFlush_args__isset() : tinfo(false), credentials(false), tableName(false), startRow(false), endRow(false), flushID(false), maxLoops(false) {}
  bool tinfo;
  bool credentials;
  bool tableName;
  bool startRow;
  bool endRow;
  bool flushID;
  bool maxLoops;
} _MasterClientService_waitForFlush_args__isset;

class MasterClientService_waitForFlush_args {
 public:

  MasterClientService_waitForFlush_args() : tableName(""), startRow(""), endRow(""), flushID(0), maxLoops(0) {
  }

  virtual ~MasterClientService_waitForFlush_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string tableName;
  std::string startRow;
  std::string endRow;
  int64_t flushID;
  int64_t maxLoops;

  _MasterClientService_waitForFlush_args__isset __isset;

  bool operator == (const MasterClientService_waitForFlush_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(startRow == rhs.startRow))
      return false;
    if (!(endRow == rhs.endRow))
      return false;
    if (!(flushID == rhs.flushID))
      return false;
    if (!(maxLoops == rhs.maxLoops))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_waitForFlush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_waitForFlush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_waitForFlush_pargs {
 public:


  virtual ~MasterClientService_waitForFlush_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* tableName;
  const std::string* startRow;
  const std::string* endRow;
  const int64_t* flushID;
  const int64_t* maxLoops;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_waitForFlush_result__isset {
  _MasterClientService_waitForFlush_result__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_waitForFlush_result__isset;

class MasterClientService_waitForFlush_result {
 public:

  MasterClientService_waitForFlush_result() {
  }

  virtual ~MasterClientService_waitForFlush_result() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_waitForFlush_result__isset __isset;

  bool operator == (const MasterClientService_waitForFlush_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_waitForFlush_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_waitForFlush_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_waitForFlush_presult__isset {
  _MasterClientService_waitForFlush_presult__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_waitForFlush_presult__isset;

class MasterClientService_waitForFlush_presult {
 public:


  virtual ~MasterClientService_waitForFlush_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_waitForFlush_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_setTableProperty_args__isset {
  _MasterClientService_setTableProperty_args__isset() : tinfo(false), credentials(false), tableName(false), property(false), value(false) {}
  bool tinfo;
  bool credentials;
  bool tableName;
  bool property;
  bool value;
} _MasterClientService_setTableProperty_args__isset;

class MasterClientService_setTableProperty_args {
 public:

  MasterClientService_setTableProperty_args() : tableName(""), property(""), value("") {
  }

  virtual ~MasterClientService_setTableProperty_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string tableName;
  std::string property;
  std::string value;

  _MasterClientService_setTableProperty_args__isset __isset;

  bool operator == (const MasterClientService_setTableProperty_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(property == rhs.property))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_setTableProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_setTableProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_setTableProperty_pargs {
 public:


  virtual ~MasterClientService_setTableProperty_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* tableName;
  const std::string* property;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_setTableProperty_result__isset {
  _MasterClientService_setTableProperty_result__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_setTableProperty_result__isset;

class MasterClientService_setTableProperty_result {
 public:

  MasterClientService_setTableProperty_result() {
  }

  virtual ~MasterClientService_setTableProperty_result() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_setTableProperty_result__isset __isset;

  bool operator == (const MasterClientService_setTableProperty_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_setTableProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_setTableProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_setTableProperty_presult__isset {
  _MasterClientService_setTableProperty_presult__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_setTableProperty_presult__isset;

class MasterClientService_setTableProperty_presult {
 public:


  virtual ~MasterClientService_setTableProperty_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_setTableProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_removeTableProperty_args__isset {
  _MasterClientService_removeTableProperty_args__isset() : tinfo(false), credentials(false), tableName(false), property(false) {}
  bool tinfo;
  bool credentials;
  bool tableName;
  bool property;
} _MasterClientService_removeTableProperty_args__isset;

class MasterClientService_removeTableProperty_args {
 public:

  MasterClientService_removeTableProperty_args() : tableName(""), property("") {
  }

  virtual ~MasterClientService_removeTableProperty_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string tableName;
  std::string property;

  _MasterClientService_removeTableProperty_args__isset __isset;

  bool operator == (const MasterClientService_removeTableProperty_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(property == rhs.property))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_removeTableProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_removeTableProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_removeTableProperty_pargs {
 public:


  virtual ~MasterClientService_removeTableProperty_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* tableName;
  const std::string* property;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_removeTableProperty_result__isset {
  _MasterClientService_removeTableProperty_result__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_removeTableProperty_result__isset;

class MasterClientService_removeTableProperty_result {
 public:

  MasterClientService_removeTableProperty_result() {
  }

  virtual ~MasterClientService_removeTableProperty_result() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_removeTableProperty_result__isset __isset;

  bool operator == (const MasterClientService_removeTableProperty_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_removeTableProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_removeTableProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_removeTableProperty_presult__isset {
  _MasterClientService_removeTableProperty_presult__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_removeTableProperty_presult__isset;

class MasterClientService_removeTableProperty_presult {
 public:


  virtual ~MasterClientService_removeTableProperty_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_removeTableProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_setMasterGoalState_args__isset {
  _MasterClientService_setMasterGoalState_args__isset() : tinfo(false), credentials(false), state(false) {}
  bool tinfo;
  bool credentials;
  bool state;
} _MasterClientService_setMasterGoalState_args__isset;

class MasterClientService_setMasterGoalState_args {
 public:

  MasterClientService_setMasterGoalState_args() {
  }

  virtual ~MasterClientService_setMasterGoalState_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  MasterGoalState::type state;

  _MasterClientService_setMasterGoalState_args__isset __isset;

  bool operator == (const MasterClientService_setMasterGoalState_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_setMasterGoalState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_setMasterGoalState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_setMasterGoalState_pargs {
 public:


  virtual ~MasterClientService_setMasterGoalState_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const MasterGoalState::type* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_setMasterGoalState_result__isset {
  _MasterClientService_setMasterGoalState_result__isset() : sec(false) {}
  bool sec;
} _MasterClientService_setMasterGoalState_result__isset;

class MasterClientService_setMasterGoalState_result {
 public:

  MasterClientService_setMasterGoalState_result() {
  }

  virtual ~MasterClientService_setMasterGoalState_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_setMasterGoalState_result__isset __isset;

  bool operator == (const MasterClientService_setMasterGoalState_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_setMasterGoalState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_setMasterGoalState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_setMasterGoalState_presult__isset {
  _MasterClientService_setMasterGoalState_presult__isset() : sec(false) {}
  bool sec;
} _MasterClientService_setMasterGoalState_presult__isset;

class MasterClientService_setMasterGoalState_presult {
 public:


  virtual ~MasterClientService_setMasterGoalState_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_setMasterGoalState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_shutdown_args__isset {
  _MasterClientService_shutdown_args__isset() : tinfo(false), credentials(false), stopTabletServers(false) {}
  bool tinfo;
  bool credentials;
  bool stopTabletServers;
} _MasterClientService_shutdown_args__isset;

class MasterClientService_shutdown_args {
 public:

  MasterClientService_shutdown_args() : stopTabletServers(0) {
  }

  virtual ~MasterClientService_shutdown_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  bool stopTabletServers;

  _MasterClientService_shutdown_args__isset __isset;

  bool operator == (const MasterClientService_shutdown_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(stopTabletServers == rhs.stopTabletServers))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_shutdown_pargs {
 public:


  virtual ~MasterClientService_shutdown_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const bool* stopTabletServers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_shutdown_result__isset {
  _MasterClientService_shutdown_result__isset() : sec(false) {}
  bool sec;
} _MasterClientService_shutdown_result__isset;

class MasterClientService_shutdown_result {
 public:

  MasterClientService_shutdown_result() {
  }

  virtual ~MasterClientService_shutdown_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_shutdown_result__isset __isset;

  bool operator == (const MasterClientService_shutdown_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_shutdown_presult__isset {
  _MasterClientService_shutdown_presult__isset() : sec(false) {}
  bool sec;
} _MasterClientService_shutdown_presult__isset;

class MasterClientService_shutdown_presult {
 public:


  virtual ~MasterClientService_shutdown_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_shutdown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_shutdownTabletServer_args__isset {
  _MasterClientService_shutdownTabletServer_args__isset() : tinfo(false), credentials(false), tabletServer(false), force(false) {}
  bool tinfo;
  bool credentials;
  bool tabletServer;
  bool force;
} _MasterClientService_shutdownTabletServer_args__isset;

class MasterClientService_shutdownTabletServer_args {
 public:

  MasterClientService_shutdownTabletServer_args() : tabletServer(""), force(0) {
  }

  virtual ~MasterClientService_shutdownTabletServer_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string tabletServer;
  bool force;

  _MasterClientService_shutdownTabletServer_args__isset __isset;

  bool operator == (const MasterClientService_shutdownTabletServer_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(tabletServer == rhs.tabletServer))
      return false;
    if (!(force == rhs.force))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_shutdownTabletServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_shutdownTabletServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_shutdownTabletServer_pargs {
 public:


  virtual ~MasterClientService_shutdownTabletServer_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* tabletServer;
  const bool* force;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_shutdownTabletServer_result__isset {
  _MasterClientService_shutdownTabletServer_result__isset() : sec(false) {}
  bool sec;
} _MasterClientService_shutdownTabletServer_result__isset;

class MasterClientService_shutdownTabletServer_result {
 public:

  MasterClientService_shutdownTabletServer_result() {
  }

  virtual ~MasterClientService_shutdownTabletServer_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_shutdownTabletServer_result__isset __isset;

  bool operator == (const MasterClientService_shutdownTabletServer_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_shutdownTabletServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_shutdownTabletServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_shutdownTabletServer_presult__isset {
  _MasterClientService_shutdownTabletServer_presult__isset() : sec(false) {}
  bool sec;
} _MasterClientService_shutdownTabletServer_presult__isset;

class MasterClientService_shutdownTabletServer_presult {
 public:


  virtual ~MasterClientService_shutdownTabletServer_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_shutdownTabletServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_setSystemProperty_args__isset {
  _MasterClientService_setSystemProperty_args__isset() : tinfo(false), credentials(false), property(false), value(false) {}
  bool tinfo;
  bool credentials;
  bool property;
  bool value;
} _MasterClientService_setSystemProperty_args__isset;

class MasterClientService_setSystemProperty_args {
 public:

  MasterClientService_setSystemProperty_args() : property(""), value("") {
  }

  virtual ~MasterClientService_setSystemProperty_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string property;
  std::string value;

  _MasterClientService_setSystemProperty_args__isset __isset;

  bool operator == (const MasterClientService_setSystemProperty_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(property == rhs.property))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_setSystemProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_setSystemProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_setSystemProperty_pargs {
 public:


  virtual ~MasterClientService_setSystemProperty_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* property;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_setSystemProperty_result__isset {
  _MasterClientService_setSystemProperty_result__isset() : sec(false) {}
  bool sec;
} _MasterClientService_setSystemProperty_result__isset;

class MasterClientService_setSystemProperty_result {
 public:

  MasterClientService_setSystemProperty_result() {
  }

  virtual ~MasterClientService_setSystemProperty_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_setSystemProperty_result__isset __isset;

  bool operator == (const MasterClientService_setSystemProperty_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_setSystemProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_setSystemProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_setSystemProperty_presult__isset {
  _MasterClientService_setSystemProperty_presult__isset() : sec(false) {}
  bool sec;
} _MasterClientService_setSystemProperty_presult__isset;

class MasterClientService_setSystemProperty_presult {
 public:


  virtual ~MasterClientService_setSystemProperty_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_setSystemProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_removeSystemProperty_args__isset {
  _MasterClientService_removeSystemProperty_args__isset() : tinfo(false), credentials(false), property(false) {}
  bool tinfo;
  bool credentials;
  bool property;
} _MasterClientService_removeSystemProperty_args__isset;

class MasterClientService_removeSystemProperty_args {
 public:

  MasterClientService_removeSystemProperty_args() : property("") {
  }

  virtual ~MasterClientService_removeSystemProperty_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string property;

  _MasterClientService_removeSystemProperty_args__isset __isset;

  bool operator == (const MasterClientService_removeSystemProperty_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(property == rhs.property))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_removeSystemProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_removeSystemProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_removeSystemProperty_pargs {
 public:


  virtual ~MasterClientService_removeSystemProperty_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* property;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_removeSystemProperty_result__isset {
  _MasterClientService_removeSystemProperty_result__isset() : sec(false) {}
  bool sec;
} _MasterClientService_removeSystemProperty_result__isset;

class MasterClientService_removeSystemProperty_result {
 public:

  MasterClientService_removeSystemProperty_result() {
  }

  virtual ~MasterClientService_removeSystemProperty_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_removeSystemProperty_result__isset __isset;

  bool operator == (const MasterClientService_removeSystemProperty_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_removeSystemProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_removeSystemProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_removeSystemProperty_presult__isset {
  _MasterClientService_removeSystemProperty_presult__isset() : sec(false) {}
  bool sec;
} _MasterClientService_removeSystemProperty_presult__isset;

class MasterClientService_removeSystemProperty_presult {
 public:


  virtual ~MasterClientService_removeSystemProperty_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_removeSystemProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_getMasterStats_args__isset {
  _MasterClientService_getMasterStats_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo;
  bool credentials;
} _MasterClientService_getMasterStats_args__isset;

class MasterClientService_getMasterStats_args {
 public:

  MasterClientService_getMasterStats_args() {
  }

  virtual ~MasterClientService_getMasterStats_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;

  _MasterClientService_getMasterStats_args__isset __isset;

  bool operator == (const MasterClientService_getMasterStats_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_getMasterStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_getMasterStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_getMasterStats_pargs {
 public:


  virtual ~MasterClientService_getMasterStats_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_getMasterStats_result__isset {
  _MasterClientService_getMasterStats_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _MasterClientService_getMasterStats_result__isset;

class MasterClientService_getMasterStats_result {
 public:

  MasterClientService_getMasterStats_result() {
  }

  virtual ~MasterClientService_getMasterStats_result() throw() {}

  MasterMonitorInfo success;
  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_getMasterStats_result__isset __isset;

  bool operator == (const MasterClientService_getMasterStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_getMasterStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_getMasterStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_getMasterStats_presult__isset {
  _MasterClientService_getMasterStats_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _MasterClientService_getMasterStats_presult__isset;

class MasterClientService_getMasterStats_presult {
 public:


  virtual ~MasterClientService_getMasterStats_presult() throw() {}

  MasterMonitorInfo* success;
  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_getMasterStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_reportSplitExtent_args__isset {
  _MasterClientService_reportSplitExtent_args__isset() : tinfo(false), credentials(false), serverName(false), split(false) {}
  bool tinfo;
  bool credentials;
  bool serverName;
  bool split;
} _MasterClientService_reportSplitExtent_args__isset;

class MasterClientService_reportSplitExtent_args {
 public:

  MasterClientService_reportSplitExtent_args() : serverName("") {
  }

  virtual ~MasterClientService_reportSplitExtent_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string serverName;
  TabletSplit split;

  _MasterClientService_reportSplitExtent_args__isset __isset;

  bool operator == (const MasterClientService_reportSplitExtent_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(serverName == rhs.serverName))
      return false;
    if (!(split == rhs.split))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_reportSplitExtent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_reportSplitExtent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_reportSplitExtent_pargs {
 public:


  virtual ~MasterClientService_reportSplitExtent_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* serverName;
  const TabletSplit* split;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_reportTabletStatus_args__isset {
  _MasterClientService_reportTabletStatus_args__isset() : tinfo(false), credentials(false), serverName(false), status(false), tablet(false) {}
  bool tinfo;
  bool credentials;
  bool serverName;
  bool status;
  bool tablet;
} _MasterClientService_reportTabletStatus_args__isset;

class MasterClientService_reportTabletStatus_args {
 public:

  MasterClientService_reportTabletStatus_args() : serverName("") {
  }

  virtual ~MasterClientService_reportTabletStatus_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  std::string serverName;
  TabletLoadState::type status;
  accumulo::data::TKeyExtent tablet;

  _MasterClientService_reportTabletStatus_args__isset __isset;

  bool operator == (const MasterClientService_reportTabletStatus_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(serverName == rhs.serverName))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(tablet == rhs.tablet))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_reportTabletStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_reportTabletStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_reportTabletStatus_pargs {
 public:


  virtual ~MasterClientService_reportTabletStatus_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const std::string* serverName;
  const TabletLoadState::type* status;
  const accumulo::data::TKeyExtent* tablet;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_beginTableOperation_args__isset {
  _MasterClientService_beginTableOperation_args__isset() : tinfo(false), credentials(false) {}
  bool tinfo;
  bool credentials;
} _MasterClientService_beginTableOperation_args__isset;

class MasterClientService_beginTableOperation_args {
 public:

  MasterClientService_beginTableOperation_args() {
  }

  virtual ~MasterClientService_beginTableOperation_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;

  _MasterClientService_beginTableOperation_args__isset __isset;

  bool operator == (const MasterClientService_beginTableOperation_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_beginTableOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_beginTableOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_beginTableOperation_pargs {
 public:


  virtual ~MasterClientService_beginTableOperation_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_beginTableOperation_result__isset {
  _MasterClientService_beginTableOperation_result__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _MasterClientService_beginTableOperation_result__isset;

class MasterClientService_beginTableOperation_result {
 public:

  MasterClientService_beginTableOperation_result() : success(0) {
  }

  virtual ~MasterClientService_beginTableOperation_result() throw() {}

  int64_t success;
  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_beginTableOperation_result__isset __isset;

  bool operator == (const MasterClientService_beginTableOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_beginTableOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_beginTableOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_beginTableOperation_presult__isset {
  _MasterClientService_beginTableOperation_presult__isset() : success(false), sec(false) {}
  bool success;
  bool sec;
} _MasterClientService_beginTableOperation_presult__isset;

class MasterClientService_beginTableOperation_presult {
 public:


  virtual ~MasterClientService_beginTableOperation_presult() throw() {}

  int64_t* success;
  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_beginTableOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_executeTableOperation_args__isset {
  _MasterClientService_executeTableOperation_args__isset() : tinfo(false), credentials(false), opid(false), op(false), arguments(false), options(false), autoClean(false) {}
  bool tinfo;
  bool credentials;
  bool opid;
  bool op;
  bool arguments;
  bool options;
  bool autoClean;
} _MasterClientService_executeTableOperation_args__isset;

class MasterClientService_executeTableOperation_args {
 public:

  MasterClientService_executeTableOperation_args() : opid(0), autoClean(0) {
  }

  virtual ~MasterClientService_executeTableOperation_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  int64_t opid;
  TableOperation::type op;
  std::vector<std::string>  arguments;
  std::map<std::string, std::string>  options;
  bool autoClean;

  _MasterClientService_executeTableOperation_args__isset __isset;

  bool operator == (const MasterClientService_executeTableOperation_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(opid == rhs.opid))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    if (!(options == rhs.options))
      return false;
    if (!(autoClean == rhs.autoClean))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_executeTableOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_executeTableOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_executeTableOperation_pargs {
 public:


  virtual ~MasterClientService_executeTableOperation_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const int64_t* opid;
  const TableOperation::type* op;
  const std::vector<std::string> * arguments;
  const std::map<std::string, std::string> * options;
  const bool* autoClean;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_executeTableOperation_result__isset {
  _MasterClientService_executeTableOperation_result__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_executeTableOperation_result__isset;

class MasterClientService_executeTableOperation_result {
 public:

  MasterClientService_executeTableOperation_result() {
  }

  virtual ~MasterClientService_executeTableOperation_result() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_executeTableOperation_result__isset __isset;

  bool operator == (const MasterClientService_executeTableOperation_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_executeTableOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_executeTableOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_executeTableOperation_presult__isset {
  _MasterClientService_executeTableOperation_presult__isset() : sec(false), tope(false) {}
  bool sec;
  bool tope;
} _MasterClientService_executeTableOperation_presult__isset;

class MasterClientService_executeTableOperation_presult {
 public:


  virtual ~MasterClientService_executeTableOperation_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_executeTableOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_waitForTableOperation_args__isset {
  _MasterClientService_waitForTableOperation_args__isset() : tinfo(false), credentials(false), opid(false) {}
  bool tinfo;
  bool credentials;
  bool opid;
} _MasterClientService_waitForTableOperation_args__isset;

class MasterClientService_waitForTableOperation_args {
 public:

  MasterClientService_waitForTableOperation_args() : opid(0) {
  }

  virtual ~MasterClientService_waitForTableOperation_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  int64_t opid;

  _MasterClientService_waitForTableOperation_args__isset __isset;

  bool operator == (const MasterClientService_waitForTableOperation_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(opid == rhs.opid))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_waitForTableOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_waitForTableOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_waitForTableOperation_pargs {
 public:


  virtual ~MasterClientService_waitForTableOperation_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const int64_t* opid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_waitForTableOperation_result__isset {
  _MasterClientService_waitForTableOperation_result__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _MasterClientService_waitForTableOperation_result__isset;

class MasterClientService_waitForTableOperation_result {
 public:

  MasterClientService_waitForTableOperation_result() : success("") {
  }

  virtual ~MasterClientService_waitForTableOperation_result() throw() {}

  std::string success;
  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_waitForTableOperation_result__isset __isset;

  bool operator == (const MasterClientService_waitForTableOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(sec == rhs.sec))
      return false;
    if (!(tope == rhs.tope))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_waitForTableOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_waitForTableOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_waitForTableOperation_presult__isset {
  _MasterClientService_waitForTableOperation_presult__isset() : success(false), sec(false), tope(false) {}
  bool success;
  bool sec;
  bool tope;
} _MasterClientService_waitForTableOperation_presult__isset;

class MasterClientService_waitForTableOperation_presult {
 public:


  virtual ~MasterClientService_waitForTableOperation_presult() throw() {}

  std::string* success;
  accumulo::security::ThriftSecurityException sec;
  accumulo::client::ThriftTableOperationException tope;

  _MasterClientService_waitForTableOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MasterClientService_finishTableOperation_args__isset {
  _MasterClientService_finishTableOperation_args__isset() : tinfo(false), credentials(false), opid(false) {}
  bool tinfo;
  bool credentials;
  bool opid;
} _MasterClientService_finishTableOperation_args__isset;

class MasterClientService_finishTableOperation_args {
 public:

  MasterClientService_finishTableOperation_args() : opid(0) {
  }

  virtual ~MasterClientService_finishTableOperation_args() throw() {}

  accumulo::cloudtrace::TInfo tinfo;
  accumulo::security::AuthInfo credentials;
  int64_t opid;

  _MasterClientService_finishTableOperation_args__isset __isset;

  bool operator == (const MasterClientService_finishTableOperation_args & rhs) const
  {
    if (!(tinfo == rhs.tinfo))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(opid == rhs.opid))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_finishTableOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_finishTableOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MasterClientService_finishTableOperation_pargs {
 public:


  virtual ~MasterClientService_finishTableOperation_pargs() throw() {}

  const accumulo::cloudtrace::TInfo* tinfo;
  const accumulo::security::AuthInfo* credentials;
  const int64_t* opid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_finishTableOperation_result__isset {
  _MasterClientService_finishTableOperation_result__isset() : sec(false) {}
  bool sec;
} _MasterClientService_finishTableOperation_result__isset;

class MasterClientService_finishTableOperation_result {
 public:

  MasterClientService_finishTableOperation_result() {
  }

  virtual ~MasterClientService_finishTableOperation_result() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_finishTableOperation_result__isset __isset;

  bool operator == (const MasterClientService_finishTableOperation_result & rhs) const
  {
    if (!(sec == rhs.sec))
      return false;
    return true;
  }
  bool operator != (const MasterClientService_finishTableOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MasterClientService_finishTableOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MasterClientService_finishTableOperation_presult__isset {
  _MasterClientService_finishTableOperation_presult__isset() : sec(false) {}
  bool sec;
} _MasterClientService_finishTableOperation_presult__isset;

class MasterClientService_finishTableOperation_presult {
 public:


  virtual ~MasterClientService_finishTableOperation_presult() throw() {}

  accumulo::security::ThriftSecurityException sec;

  _MasterClientService_finishTableOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MasterClientServiceClient : virtual public MasterClientServiceIf {
 public:
  MasterClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MasterClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t initiateFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName);
  void send_initiateFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName);
  int64_t recv_initiateFlush();
  void waitForFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& startRow, const std::string& endRow, const int64_t flushID, const int64_t maxLoops);
  void send_waitForFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& startRow, const std::string& endRow, const int64_t flushID, const int64_t maxLoops);
  void recv_waitForFlush();
  void setTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property, const std::string& value);
  void send_setTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property, const std::string& value);
  void recv_setTableProperty();
  void removeTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property);
  void send_removeTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property);
  void recv_removeTableProperty();
  void setMasterGoalState(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const MasterGoalState::type state);
  void send_setMasterGoalState(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const MasterGoalState::type state);
  void recv_setMasterGoalState();
  void shutdown(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const bool stopTabletServers);
  void send_shutdown(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const bool stopTabletServers);
  void recv_shutdown();
  void shutdownTabletServer(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tabletServer, const bool force);
  void send_shutdownTabletServer(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tabletServer, const bool force);
  void recv_shutdownTabletServer();
  void setSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property, const std::string& value);
  void send_setSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property, const std::string& value);
  void recv_setSystemProperty();
  void removeSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property);
  void send_removeSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property);
  void recv_removeSystemProperty();
  void getMasterStats(MasterMonitorInfo& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void send_getMasterStats(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void recv_getMasterStats(MasterMonitorInfo& _return);
  void reportSplitExtent(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletSplit& split);
  void send_reportSplitExtent(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletSplit& split);
  void reportTabletStatus(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletLoadState::type status, const accumulo::data::TKeyExtent& tablet);
  void send_reportTabletStatus(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletLoadState::type status, const accumulo::data::TKeyExtent& tablet);
  int64_t beginTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  void send_beginTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials);
  int64_t recv_beginTableOperation();
  void executeTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid, const TableOperation::type op, const std::vector<std::string> & arguments, const std::map<std::string, std::string> & options, const bool autoClean);
  void send_executeTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid, const TableOperation::type op, const std::vector<std::string> & arguments, const std::map<std::string, std::string> & options, const bool autoClean);
  void recv_executeTableOperation();
  void waitForTableOperation(std::string& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid);
  void send_waitForTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid);
  void recv_waitForTableOperation(std::string& _return);
  void finishTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid);
  void send_finishTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid);
  void recv_finishTableOperation();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MasterClientServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MasterClientServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MasterClientServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_initiateFlush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_waitForFlush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTableProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeTableProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMasterGoalState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdownTabletServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setSystemProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeSystemProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMasterStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportSplitExtent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportTabletStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_beginTableOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeTableOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_waitForTableOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_finishTableOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MasterClientServiceProcessor(boost::shared_ptr<MasterClientServiceIf> iface) :
    iface_(iface) {
    processMap_["initiateFlush"] = &MasterClientServiceProcessor::process_initiateFlush;
    processMap_["waitForFlush"] = &MasterClientServiceProcessor::process_waitForFlush;
    processMap_["setTableProperty"] = &MasterClientServiceProcessor::process_setTableProperty;
    processMap_["removeTableProperty"] = &MasterClientServiceProcessor::process_removeTableProperty;
    processMap_["setMasterGoalState"] = &MasterClientServiceProcessor::process_setMasterGoalState;
    processMap_["shutdown"] = &MasterClientServiceProcessor::process_shutdown;
    processMap_["shutdownTabletServer"] = &MasterClientServiceProcessor::process_shutdownTabletServer;
    processMap_["setSystemProperty"] = &MasterClientServiceProcessor::process_setSystemProperty;
    processMap_["removeSystemProperty"] = &MasterClientServiceProcessor::process_removeSystemProperty;
    processMap_["getMasterStats"] = &MasterClientServiceProcessor::process_getMasterStats;
    processMap_["reportSplitExtent"] = &MasterClientServiceProcessor::process_reportSplitExtent;
    processMap_["reportTabletStatus"] = &MasterClientServiceProcessor::process_reportTabletStatus;
    processMap_["beginTableOperation"] = &MasterClientServiceProcessor::process_beginTableOperation;
    processMap_["executeTableOperation"] = &MasterClientServiceProcessor::process_executeTableOperation;
    processMap_["waitForTableOperation"] = &MasterClientServiceProcessor::process_waitForTableOperation;
    processMap_["finishTableOperation"] = &MasterClientServiceProcessor::process_finishTableOperation;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MasterClientServiceProcessor() {}
};

class MasterClientServiceMultiface : virtual public MasterClientServiceIf {
 public:
  MasterClientServiceMultiface(std::vector<boost::shared_ptr<MasterClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MasterClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MasterClientServiceIf> > ifaces_;
  MasterClientServiceMultiface() {}
  void add(boost::shared_ptr<MasterClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t initiateFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->initiateFlush(tinfo, credentials, tableName);
      } else {
        ifaces_[i]->initiateFlush(tinfo, credentials, tableName);
      }
    }
  }

  void waitForFlush(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& startRow, const std::string& endRow, const int64_t flushID, const int64_t maxLoops) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->waitForFlush(tinfo, credentials, tableName, startRow, endRow, flushID, maxLoops);
    }
  }

  void setTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property, const std::string& value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->setTableProperty(tinfo, credentials, tableName, property, value);
    }
  }

  void removeTableProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tableName, const std::string& property) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->removeTableProperty(tinfo, credentials, tableName, property);
    }
  }

  void setMasterGoalState(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const MasterGoalState::type state) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->setMasterGoalState(tinfo, credentials, state);
    }
  }

  void shutdown(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const bool stopTabletServers) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown(tinfo, credentials, stopTabletServers);
    }
  }

  void shutdownTabletServer(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tabletServer, const bool force) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdownTabletServer(tinfo, credentials, tabletServer, force);
    }
  }

  void setSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property, const std::string& value) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->setSystemProperty(tinfo, credentials, property, value);
    }
  }

  void removeSystemProperty(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& property) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->removeSystemProperty(tinfo, credentials, property);
    }
  }

  void getMasterStats(MasterMonitorInfo& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMasterStats(_return, tinfo, credentials);
        return;
      } else {
        ifaces_[i]->getMasterStats(_return, tinfo, credentials);
      }
    }
  }

  void reportSplitExtent(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletSplit& split) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->reportSplitExtent(tinfo, credentials, serverName, split);
    }
  }

  void reportTabletStatus(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& serverName, const TabletLoadState::type status, const accumulo::data::TKeyExtent& tablet) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->reportTabletStatus(tinfo, credentials, serverName, status, tablet);
    }
  }

  int64_t beginTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->beginTableOperation(tinfo, credentials);
      } else {
        ifaces_[i]->beginTableOperation(tinfo, credentials);
      }
    }
  }

  void executeTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid, const TableOperation::type op, const std::vector<std::string> & arguments, const std::map<std::string, std::string> & options, const bool autoClean) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->executeTableOperation(tinfo, credentials, opid, op, arguments, options, autoClean);
    }
  }

  void waitForTableOperation(std::string& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->waitForTableOperation(_return, tinfo, credentials, opid);
        return;
      } else {
        ifaces_[i]->waitForTableOperation(_return, tinfo, credentials, opid);
      }
    }
  }

  void finishTableOperation(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t opid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->finishTableOperation(tinfo, credentials, opid);
    }
  }

};

}} // namespace

#endif
