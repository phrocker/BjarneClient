// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ClientService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace accumulo::client;

class ClientServiceHandler : virtual public ClientServiceIf {
 public:
  ClientServiceHandler() {
    // Your initialization goes here
  }

  void getRootTabletLocation(std::string& _return) {
    // Your implementation goes here
    printf("getRootTabletLocation\n");
  }

  void getInstanceId(std::string& _return) {
    // Your implementation goes here
    printf("getInstanceId\n");
  }

  void getZooKeepers(std::string& _return) {
    // Your implementation goes here
    printf("getZooKeepers\n");
  }

  void bulkImportFiles(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const int64_t tid, const std::string& tableId, const std::vector<std::string> & files, const std::string& errorDir, const bool setTime) {
    // Your implementation goes here
    printf("bulkImportFiles\n");
  }

  bool isActive(const accumulo::cloudtrace::TInfo& tinfo, const int64_t tid) {
    // Your implementation goes here
    printf("isActive\n");
  }

  void ping(const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("ping\n");
  }

  bool authenticateUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password) {
    // Your implementation goes here
    printf("authenticateUser\n");
  }

  void listUsers(std::set<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("listUsers\n");
  }

  void createUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password, const std::vector<std::string> & authorizations) {
    // Your implementation goes here
    printf("createUser\n");
  }

  void dropUser(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user) {
    // Your implementation goes here
    printf("dropUser\n");
  }

  void changePassword(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& password) {
    // Your implementation goes here
    printf("changePassword\n");
  }

  void changeAuthorizations(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::vector<std::string> & authorizations) {
    // Your implementation goes here
    printf("changeAuthorizations\n");
  }

  void getUserAuthorizations(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user) {
    // Your implementation goes here
    printf("getUserAuthorizations\n");
  }

  bool hasSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t sysPerm) {
    // Your implementation goes here
    printf("hasSystemPermission\n");
  }

  bool hasTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t tblPerm) {
    // Your implementation goes here
    printf("hasTablePermission\n");
  }

  void grantSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission) {
    // Your implementation goes here
    printf("grantSystemPermission\n");
  }

  void revokeSystemPermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const int8_t permission) {
    // Your implementation goes here
    printf("revokeSystemPermission\n");
  }

  void grantTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission) {
    // Your implementation goes here
    printf("grantTablePermission\n");
  }

  void revokeTablePermission(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& user, const std::string& tableName, const int8_t permission) {
    // Your implementation goes here
    printf("revokeTablePermission\n");
  }

  void getConfiguration(std::map<std::string, std::string> & _return, const ConfigurationType::type type) {
    // Your implementation goes here
    printf("getConfiguration\n");
  }

  void getTableConfiguration(std::map<std::string, std::string> & _return, const std::string& tableName) {
    // Your implementation goes here
    printf("getTableConfiguration\n");
  }

  bool checkClass(const accumulo::cloudtrace::TInfo& tinfo, const std::string& className, const std::string& interfaceMatch) {
    // Your implementation goes here
    printf("checkClass\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ClientServiceHandler> handler(new ClientServiceHandler());
  shared_ptr<TProcessor> processor(new ClientServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

