// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MutationLogger.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace accumulo::tabletserver;

class MutationLoggerHandler : virtual public MutationLoggerIf {
 public:
  MutationLoggerHandler() {
    // Your initialization goes here
  }

  void create(LogFile& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& tserverSession) {
    // Your implementation goes here
    printf("create\n");
  }

  void defineTablet(const accumulo::cloudtrace::TInfo& tinfo, const LogID id, const int64_t seq, const TabletID tid, const accumulo::data::TKeyExtent& tablet) {
    // Your implementation goes here
    printf("defineTablet\n");
  }

  void log(const accumulo::cloudtrace::TInfo& tinfo, const LogID id, const int64_t seq, const TabletID tid, const accumulo::data::TMutation& mutation) {
    // Your implementation goes here
    printf("log\n");
  }

  void logManyTablets(const accumulo::cloudtrace::TInfo& tinfo, const LogID id, const std::vector<TabletMutations> & mutations) {
    // Your implementation goes here
    printf("logManyTablets\n");
  }

  void minorCompactionStarted(const accumulo::cloudtrace::TInfo& tinfo, const LogID id, const int64_t seq, const TabletID tid, const std::string& fqfn) {
    // Your implementation goes here
    printf("minorCompactionStarted\n");
  }

  void minorCompactionFinished(const accumulo::cloudtrace::TInfo& tinfo, const LogID id, const int64_t seq, const TabletID tid, const std::string& fqfn) {
    // Your implementation goes here
    printf("minorCompactionFinished\n");
  }

  void close(const accumulo::cloudtrace::TInfo& tinfo, const LogID id) {
    // Your implementation goes here
    printf("close\n");
  }

  void startCopy(LogCopyInfo& _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::string& name, const std::string& fullyQualifiedFileName, const bool sort) {
    // Your implementation goes here
    printf("startCopy\n");
  }

  void getClosedLogs(std::vector<std::string> & _return, const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("getClosedLogs\n");
  }

  void remove(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials, const std::vector<std::string> & files) {
    // Your implementation goes here
    printf("remove\n");
  }

  void beginShutdown(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("beginShutdown\n");
  }

  void halt(const accumulo::cloudtrace::TInfo& tinfo, const accumulo::security::AuthInfo& credentials) {
    // Your implementation goes here
    printf("halt\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MutationLoggerHandler> handler(new MutationLoggerHandler());
  shared_ptr<TProcessor> processor(new MutationLoggerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

